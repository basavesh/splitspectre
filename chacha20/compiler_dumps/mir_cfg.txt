digraph __crate__ {
subgraph cluster_Mir_0_40 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn chacha20_encrypt(_1: &amp;std::vec::Vec&lt;secret_integers::U8&gt;, _2: u32, _3: &amp;std::vec::Vec&lt;u8&gt;, _4: &amp;std::vec::Vec&lt;u8&gt;) -&gt; std::vec::Vec&lt;u8&gt;<br align="left"/>let _5: &amp;std::vec::Vec&lt;secret_integers::U8&gt;;<br align="left"/>let _6: std::vec::Vec&lt;secret_integers::U8&gt;;<br align="left"/>let mut _7: &amp;[u8];<br align="left"/>let _8: &amp;[u8];<br align="left"/>let mut _9: &amp;std::vec::Vec&lt;u8&gt;;<br align="left"/>let _10: &amp;std::vec::Vec&lt;secret_integers::U8&gt;;<br align="left"/>let _11: std::vec::Vec&lt;secret_integers::U8&gt;;<br align="left"/>let mut _12: &amp;[u8];<br align="left"/>let _13: &amp;[u8];<br align="left"/>let mut _14: &amp;std::vec::Vec&lt;u8&gt;;<br align="left"/>let mut _15: &amp;[secret_integers::U8];<br align="left"/>let _16: &amp;[secret_integers::U8];<br align="left"/>let mut _17: &amp;std::vec::Vec&lt;secret_integers::U8&gt;;<br align="left"/>let _18: &amp;std::vec::Vec&lt;secret_integers::U8&gt;;<br align="left"/>let _19: std::vec::Vec&lt;secret_integers::U8&gt;;<br align="left"/>let mut _20: &amp;std::vec::Vec&lt;secret_integers::U8&gt;;<br align="left"/>let mut _21: secret_integers::U32;<br align="left"/>let mut _22: u32;<br align="left"/>let mut _23: &amp;std::vec::Vec&lt;secret_integers::U8&gt;;<br align="left"/>let mut _24: &amp;std::vec::Vec&lt;secret_integers::U8&gt;;<br align="left"/>debug key =&gt; _1;<br align="left"/>debug counter =&gt; _2;<br align="left"/>debug nonce =&gt; _3;<br align="left"/>debug msg =&gt; _4;<br align="left"/>debug nonce =&gt; _5;<br align="left"/>debug msg =&gt; _10;<br align="left"/>>;
    bb0__0_40 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_9 = _3<br/></td></tr><tr><td align="left">_8 = &lt;std::vec::Vec&lt;u8&gt; as std::ops::Deref&gt;::deref(move _9)</td></tr></table>>];
    bb1__0_40 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_7 = _8<br/></td></tr><tr><td align="left">_6 = classify_u8s(move _7)</td></tr></table>>];
    bb2__0_40 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_5 = &amp;_6<br/>_14 = _4<br/></td></tr><tr><td align="left">_13 = &lt;std::vec::Vec&lt;u8&gt; as std::ops::Deref&gt;::deref(move _14)</td></tr></table>>];
    bb3__0_40 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_12 = _13<br/></td></tr><tr><td align="left">_11 = classify_u8s(move _12)</td></tr></table>>];
    bb4__0_40 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_10 = &amp;_11<br/>_20 = _1<br/>_22 = _2<br/></td></tr><tr><td align="left">_21 = &lt;u32 as std::convert::Into&lt;secret_integers::U32&gt;&gt;::into(move _22)</td></tr></table>>];
    bb5__0_40 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">_23 = _5<br/>_24 = _10<br/></td></tr><tr><td align="left">_19 = chacha20_counter_mode(move _20, move _21, move _23, move _24)</td></tr></table>>];
    bb6__0_40 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">_18 = &amp;_19<br/>_17 = _18<br/></td></tr><tr><td align="left">_16 = &lt;std::vec::Vec&lt;secret_integers::U8&gt; as std::ops::Deref&gt;::deref(move _17)</td></tr></table>>];
    bb7__0_40 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_15 = _16<br/></td></tr><tr><td align="left">_0 = declassify_u8s(move _15)</td></tr></table>>];
    bb8__0_40 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left">drop(_11)</td></tr></table>>];
    bb9__0_40 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left">drop(_6)</td></tr></table>>];
    bb10__0_40 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left">drop(_19)</td></tr></table>>];
    bb11__0_40 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left">return</td></tr></table>>];
    bb12__0_40 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">12 (cleanup)</td></tr><tr><td align="left">drop(_11)</td></tr></table>>];
    bb13__0_40 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">13 (cleanup)</td></tr><tr><td align="left">drop(_6)</td></tr></table>>];
    bb14__0_40 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">14 (cleanup)</td></tr><tr><td align="left">drop(_19)</td></tr></table>>];
    bb15__0_40 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">15 (cleanup)</td></tr><tr><td align="left">drop(_11)</td></tr></table>>];
    bb16__0_40 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">16 (cleanup)</td></tr><tr><td align="left">drop(_6)</td></tr></table>>];
    bb17__0_40 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">17 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_40 -> bb1__0_40 [label="return"];
    bb1__0_40 -> bb2__0_40 [label="return"];
    bb2__0_40 -> bb3__0_40 [label="return"];
    bb2__0_40 -> bb16__0_40 [label="unwind"];
    bb3__0_40 -> bb4__0_40 [label="return"];
    bb3__0_40 -> bb16__0_40 [label="unwind"];
    bb4__0_40 -> bb5__0_40 [label="return"];
    bb4__0_40 -> bb15__0_40 [label="unwind"];
    bb5__0_40 -> bb6__0_40 [label="return"];
    bb5__0_40 -> bb15__0_40 [label="unwind"];
    bb6__0_40 -> bb7__0_40 [label="return"];
    bb6__0_40 -> bb12__0_40 [label="unwind"];
    bb7__0_40 -> bb8__0_40 [label="return"];
    bb7__0_40 -> bb12__0_40 [label="unwind"];
    bb8__0_40 -> bb9__0_40 [label="return"];
    bb8__0_40 -> bb13__0_40 [label="unwind"];
    bb9__0_40 -> bb10__0_40 [label="return"];
    bb9__0_40 -> bb14__0_40 [label="unwind"];
    bb10__0_40 -> bb11__0_40 [label="return"];
    bb12__0_40 -> bb13__0_40 [label="return"];
    bb13__0_40 -> bb14__0_40 [label="return"];
    bb14__0_40 -> bb17__0_40 [label="return"];
    bb15__0_40 -> bb16__0_40 [label="return"];
    bb16__0_40 -> bb17__0_40 [label="return"];
}
subgraph cluster_Mir_0_37 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn chacha20_counter_mode::{closure#0}::{constant#0}() -&gt; usize<br align="left"/>>;
    bb0__0_37 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_0 = const BLOCK_SIZE<br/></td></tr><tr><td align="left">return</td></tr></table>>];
}
subgraph cluster_Mir_0_34 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn chacha20_counter_mode(_1: &amp;std::vec::Vec&lt;secret_integers::U8&gt;, _2: secret_integers::U32, _3: &amp;std::vec::Vec&lt;secret_integers::U8&gt;, _4: &amp;std::vec::Vec&lt;secret_integers::U8&gt;) -&gt; std::vec::Vec&lt;secret_integers::U8&gt;<br align="left"/>let mut _5: std::vec::Vec&lt;[secret_integers::U8; 64]&gt;;<br align="left"/>let mut _6: std::iter::Map&lt;std::slice::Chunks&lt;secret_integers::U8&gt;, [closure@chacha20/src/main.rs:96:14: 100:10]&gt;;<br align="left"/>let mut _7: std::slice::Chunks&lt;secret_integers::U8&gt;;<br align="left"/>let mut _8: &amp;[secret_integers::U8];<br align="left"/>let _9: &amp;[secret_integers::U8];<br align="left"/>let mut _10: &amp;std::vec::Vec&lt;secret_integers::U8&gt;;<br align="left"/>let mut _11: [closure@chacha20/src/main.rs:96:14: 100:10];<br align="left"/>let _12: usize;<br align="left"/>let mut _13: &amp;std::vec::Vec&lt;[secret_integers::U8; 64]&gt;;<br align="left"/>let mut _14: [secret_integers::U8; 64];<br align="left"/>let mut _15: secret_integers::U32;<br align="left"/>let mut _16: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _17: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _18: usize;<br align="left"/>let mut _19: usize;<br align="left"/>let mut _20: &amp;std::vec::Vec&lt;[secret_integers::U8; 64]&gt;;<br align="left"/>let mut _21: (usize, bool);<br align="left"/>let mut _22: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _23: usize;<br align="left"/>let mut _24: std::option::Option&lt;usize&gt;;<br align="left"/>let mut _25: &amp;mut std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _26: &amp;mut std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _27: isize;<br align="left"/>let _28: usize;<br align="left"/>let mut _29: usize;<br align="left"/>let _30: usize;<br align="left"/>let mut _31: [secret_integers::U8; 64];<br align="left"/>let mut _32: &amp;std::vec::Vec&lt;secret_integers::U8&gt;;<br align="left"/>let mut _33: secret_integers::U32;<br align="left"/>let mut _34: &amp;std::vec::Vec&lt;secret_integers::U8&gt;;<br align="left"/>let mut _35: [secret_integers::U8; 64];<br align="left"/>let mut _36: &amp;[secret_integers::U8; 64];<br align="left"/>let _37: &amp;[secret_integers::U8; 64];<br align="left"/>let _38: &amp;[secret_integers::U8; 64];<br align="left"/>let mut _39: &amp;std::vec::Vec&lt;[secret_integers::U8; 64]&gt;;<br align="left"/>let mut _40: usize;<br align="left"/>let mut _41: &amp;[secret_integers::U8; 64];<br align="left"/>let _42: &amp;[secret_integers::U8; 64];<br align="left"/>let mut _43: &amp;mut [secret_integers::U8; 64];<br align="left"/>let mut _44: &amp;mut std::vec::Vec&lt;[secret_integers::U8; 64]&gt;;<br align="left"/>let mut _45: usize;<br align="left"/>let _46: ();<br align="left"/>let mut _47: &amp;mut secret_integers::U32;<br align="left"/>let mut _48: secret_integers::U32;<br align="left"/>let _49: &amp;mut [secret_integers::U8; 64];<br align="left"/>let mut _50: &amp;mut [secret_integers::U8; 64];<br align="left"/>let mut _51: &amp;mut std::vec::Vec&lt;[secret_integers::U8; 64]&gt;;<br align="left"/>let mut _52: usize;<br align="left"/>let mut _53: usize;<br align="left"/>let mut _54: (usize, bool);<br align="left"/>let mut _55: [secret_integers::U8; 64];<br align="left"/>let mut _56: &amp;std::vec::Vec&lt;secret_integers::U8&gt;;<br align="left"/>let mut _57: secret_integers::U32;<br align="left"/>let mut _58: &amp;std::vec::Vec&lt;secret_integers::U8&gt;;<br align="left"/>let mut _59: [secret_integers::U8; 64];<br align="left"/>let mut _60: &amp;[secret_integers::U8; 64];<br align="left"/>let mut _61: &amp;[secret_integers::U8; 64];<br align="left"/>let _62: &amp;[secret_integers::U8; 64];<br align="left"/>let mut _63: std::iter::Take&lt;std::iter::Flatten&lt;std::iter::Map&lt;std::slice::Iter&lt;[secret_integers::U8; 64]&gt;, [closure@chacha20/src/main.rs:115:14: 115:36]&gt;&gt;&gt;;<br align="left"/>let mut _64: std::iter::Flatten&lt;std::iter::Map&lt;std::slice::Iter&lt;[secret_integers::U8; 64]&gt;, [closure@chacha20/src/main.rs:115:14: 115:36]&gt;&gt;;<br align="left"/>let mut _65: std::iter::Map&lt;std::slice::Iter&lt;[secret_integers::U8; 64]&gt;, [closure@chacha20/src/main.rs:115:14: 115:36]&gt;;<br align="left"/>let mut _66: std::slice::Iter&lt;[secret_integers::U8; 64]&gt;;<br align="left"/>let mut _67: &amp;[[secret_integers::U8; 64]];<br align="left"/>let _68: &amp;[[secret_integers::U8; 64]];<br align="left"/>let mut _69: &amp;std::vec::Vec&lt;[secret_integers::U8; 64]&gt;;<br align="left"/>let mut _70: [closure@chacha20/src/main.rs:115:14: 115:36];<br align="left"/>let mut _71: usize;<br align="left"/>let mut _72: &amp;std::vec::Vec&lt;secret_integers::U8&gt;;<br align="left"/>let mut _73: bool;<br align="left"/>debug key =&gt; _1;<br align="left"/>debug counter =&gt; _2;<br align="left"/>debug nonce =&gt; _3;<br align="left"/>debug msg =&gt; _4;<br align="left"/>debug blocks =&gt; _5;<br align="left"/>debug nb_blocks =&gt; _12;<br align="left"/>debug key_block =&gt; _14;<br align="left"/>debug ctr =&gt; _15;<br align="left"/>debug iter =&gt; _22;<br align="left"/>debug __next =&gt; _23;<br align="left"/>debug val =&gt; _28;<br align="left"/>debug i =&gt; _30;<br align="left"/>debug last =&gt; _49;<br align="left"/>>;
    bb0__0_34 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_73 = const false<br/>_10 = _4<br/></td></tr><tr><td align="left">_9 = &lt;std::vec::Vec&lt;secret_integers::U8&gt; as std::ops::Deref&gt;::deref(move _10)</td></tr></table>>];
    bb1__0_34 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_8 = _9<br/></td></tr><tr><td align="left">_7 = core::slice::&lt;impl [secret_integers::U8]&gt;::chunks(move _8, const BLOCK_SIZE)</td></tr></table>>];
    bb2__0_34 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left">_6 = &lt;std::slice::Chunks&lt;secret_integers::U8&gt; as std::iter::Iterator&gt;::map::&lt;[secret_integers::U8; 64], [closure@chacha20/src/main.rs:96:14: 100:10]&gt;(move _7, move _11)</td></tr></table>>];
    bb3__0_34 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left">_5 = &lt;std::iter::Map&lt;std::slice::Chunks&lt;secret_integers::U8&gt;, [closure@chacha20/src/main.rs:96:14: 100:10]&gt; as std::iter::Iterator&gt;::collect::&lt;std::vec::Vec&lt;[secret_integers::U8; 64]&gt;&gt;(move _6)</td></tr></table>>];
    bb4__0_34 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_13 = &amp;_5<br/></td></tr><tr><td align="left">_12 = std::vec::Vec::&lt;[secret_integers::U8; 64]&gt;::len(move _13)</td></tr></table>>];
    bb5__0_34 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">_15 = _2<br/>_20 = &amp;_5<br/></td></tr><tr><td align="left">_19 = std::vec::Vec::&lt;[secret_integers::U8; 64]&gt;::len(move _20)</td></tr></table>>];
    bb6__0_34 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">_21 = CheckedSub(_19, const 1_usize)<br/></td></tr><tr><td align="left">assert(!move (_21.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, move _19, const 1_usize)</td></tr></table>>];
    bb7__0_34 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_18 = move (_21.0: usize)<br/>(_17.0: usize) = const 0_usize<br/>(_17.1: usize) = move _18<br/></td></tr><tr><td align="left">_16 = &lt;std::ops::Range&lt;usize&gt; as std::iter::IntoIterator&gt;::into_iter(move _17)</td></tr></table>>];
    bb8__0_34 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">_22 = move _16<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_34 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">_26 = &amp;mut _22<br/>_25 = &amp;mut (*_26)<br/></td></tr><tr><td align="left">_24 = &lt;std::ops::Range&lt;usize&gt; as std::iter::Iterator&gt;::next(move _25)</td></tr></table>>];
    bb10__0_34 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">_27 = discriminant(_24)<br/></td></tr><tr><td align="left">switchInt(move _27)</td></tr></table>>];
    bb11__0_34 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">_51 = &amp;mut _5<br/>_53 = _12<br/>_54 = CheckedSub(_53, const 1_usize)<br/></td></tr><tr><td align="left">assert(!move (_54.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, move _53, const 1_usize)</td></tr></table>>];
    bb12__0_34 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb13__0_34 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">_28 = ((_24 as Some).0: usize)<br/>_29 = _28<br/>_23 = move _29<br/>_30 = _23<br/>_32 = _1<br/>_33 = _15<br/>_34 = _3<br/></td></tr><tr><td align="left">_31 = chacha20_block(move _32, move _33, move _34)</td></tr></table>>];
    bb14__0_34 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">_14 = move _31<br/>_39 = &amp;_5<br/>_40 = _30<br/></td></tr><tr><td align="left">_38 = &lt;std::vec::Vec&lt;[secret_integers::U8; 64]&gt; as std::ops::Index&lt;usize&gt;&gt;::index(move _39, move _40)</td></tr></table>>];
    bb15__0_34 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">_37 = _38<br/>_36 = _37<br/>_42 = &amp;_14<br/>_41 = _42<br/></td></tr><tr><td align="left">_35 = xor_block(move _36, move _41)</td></tr></table>>];
    bb16__0_34 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">_44 = &amp;mut _5<br/>_45 = _30<br/></td></tr><tr><td align="left">_43 = &lt;std::vec::Vec&lt;[secret_integers::U8; 64]&gt; as std::ops::IndexMut&lt;usize&gt;&gt;::index_mut(move _44, move _45)</td></tr></table>>];
    bb17__0_34 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">(*_43) = move _35<br/>_47 = &amp;mut _15<br/></td></tr><tr><td align="left">_48 = secret_integers::U32::one()</td></tr></table>>];
    bb18__0_34 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left">_46 = &lt;secret_integers::U32 as std::ops::AddAssign&gt;::add_assign(move _47, move _48)</td></tr></table>>];
    bb19__0_34 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left">goto</td></tr></table>>];
    bb20__0_34 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">_52 = move (_54.0: usize)<br/></td></tr><tr><td align="left">_50 = &lt;std::vec::Vec&lt;[secret_integers::U8; 64]&gt; as std::ops::IndexMut&lt;usize&gt;&gt;::index_mut(move _51, move _52)</td></tr></table>>];
    bb21__0_34 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">_49 = &amp;mut (*_50)<br/>_56 = _1<br/>_57 = _15<br/>_58 = _3<br/></td></tr><tr><td align="left">_55 = chacha20_block(move _56, move _57, move _58)</td></tr></table>>];
    bb22__0_34 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">_14 = move _55<br/>_60 = &amp;(*_49)<br/>_62 = &amp;_14<br/>_61 = _62<br/></td></tr><tr><td align="left">_59 = xor_block(move _60, move _61)</td></tr></table>>];
    bb23__0_34 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">(*_49) = move _59<br/>_69 = &amp;_5<br/></td></tr><tr><td align="left">_68 = &lt;std::vec::Vec&lt;[secret_integers::U8; 64]&gt; as std::ops::Deref&gt;::deref(move _69)</td></tr></table>>];
    bb24__0_34 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">_67 = _68<br/></td></tr><tr><td align="left">_66 = core::slice::&lt;impl [[secret_integers::U8; 64]]&gt;::iter(move _67)</td></tr></table>>];
    bb25__0_34 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left">_65 = &lt;std::slice::Iter&lt;[secret_integers::U8; 64]&gt; as std::iter::Iterator&gt;::map::&lt;std::vec::Vec&lt;secret_integers::U8&gt;, [closure@chacha20/src/main.rs:115:14: 115:36]&gt;(move _66, move _70)</td></tr></table>>];
    bb26__0_34 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left">_64 = &lt;std::iter::Map&lt;std::slice::Iter&lt;[secret_integers::U8; 64]&gt;, [closure@chacha20/src/main.rs:115:14: 115:36]&gt; as std::iter::Iterator&gt;::flatten(move _65)</td></tr></table>>];
    bb27__0_34 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">_73 = const true<br/>_72 = _4<br/></td></tr><tr><td align="left">_71 = std::vec::Vec::&lt;secret_integers::U8&gt;::len(move _72)</td></tr></table>>];
    bb28__0_34 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">_73 = const false<br/></td></tr><tr><td align="left">_63 = &lt;std::iter::Flatten&lt;std::iter::Map&lt;std::slice::Iter&lt;[secret_integers::U8; 64]&gt;, [closure@chacha20/src/main.rs:115:14: 115:36]&gt;&gt; as std::iter::Iterator&gt;::take(move _64, move _71)</td></tr></table>>];
    bb29__0_34 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">_73 = const false<br/></td></tr><tr><td align="left">_0 = &lt;std::iter::Take&lt;std::iter::Flatten&lt;std::iter::Map&lt;std::slice::Iter&lt;[secret_integers::U8; 64]&gt;, [closure@chacha20/src/main.rs:115:14: 115:36]&gt;&gt;&gt; as std::iter::Iterator&gt;::collect::&lt;std::vec::Vec&lt;secret_integers::U8&gt;&gt;(move _63)</td></tr></table>>];
    bb30__0_34 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left">drop(_5)</td></tr></table>>];
    bb31__0_34 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left">return</td></tr></table>>];
    bb32__0_34 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">32 (cleanup)</td></tr><tr><td align="left">drop(_5)</td></tr></table>>];
    bb33__0_34 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">33 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb34__0_34 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">34 (cleanup)</td></tr><tr><td align="left">drop(_64)</td></tr></table>>];
    bb35__0_34 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">35 (cleanup)</td></tr><tr><td align="left">switchInt(_73)</td></tr></table>>];
    bb0__0_34 -> bb1__0_34 [label="return"];
    bb1__0_34 -> bb2__0_34 [label="return"];
    bb2__0_34 -> bb3__0_34 [label="return"];
    bb3__0_34 -> bb4__0_34 [label="return"];
    bb4__0_34 -> bb5__0_34 [label="return"];
    bb4__0_34 -> bb32__0_34 [label="unwind"];
    bb5__0_34 -> bb6__0_34 [label="return"];
    bb5__0_34 -> bb32__0_34 [label="unwind"];
    bb6__0_34 -> bb7__0_34 [label="success"];
    bb6__0_34 -> bb32__0_34 [label="unwind"];
    bb7__0_34 -> bb8__0_34 [label="return"];
    bb7__0_34 -> bb32__0_34 [label="unwind"];
    bb8__0_34 -> bb9__0_34 [label=""];
    bb9__0_34 -> bb10__0_34 [label="return"];
    bb9__0_34 -> bb32__0_34 [label="unwind"];
    bb10__0_34 -> bb11__0_34 [label="0_isize"];
    bb10__0_34 -> bb13__0_34 [label="1_isize"];
    bb10__0_34 -> bb12__0_34 [label="otherwise"];
    bb11__0_34 -> bb20__0_34 [label="success"];
    bb11__0_34 -> bb32__0_34 [label="unwind"];
    bb13__0_34 -> bb14__0_34 [label="return"];
    bb13__0_34 -> bb32__0_34 [label="unwind"];
    bb14__0_34 -> bb15__0_34 [label="return"];
    bb14__0_34 -> bb32__0_34 [label="unwind"];
    bb15__0_34 -> bb16__0_34 [label="return"];
    bb15__0_34 -> bb32__0_34 [label="unwind"];
    bb16__0_34 -> bb17__0_34 [label="return"];
    bb16__0_34 -> bb32__0_34 [label="unwind"];
    bb17__0_34 -> bb18__0_34 [label="return"];
    bb17__0_34 -> bb32__0_34 [label="unwind"];
    bb18__0_34 -> bb19__0_34 [label="return"];
    bb18__0_34 -> bb32__0_34 [label="unwind"];
    bb19__0_34 -> bb9__0_34 [label=""];
    bb20__0_34 -> bb21__0_34 [label="return"];
    bb20__0_34 -> bb32__0_34 [label="unwind"];
    bb21__0_34 -> bb22__0_34 [label="return"];
    bb21__0_34 -> bb32__0_34 [label="unwind"];
    bb22__0_34 -> bb23__0_34 [label="return"];
    bb22__0_34 -> bb32__0_34 [label="unwind"];
    bb23__0_34 -> bb24__0_34 [label="return"];
    bb23__0_34 -> bb32__0_34 [label="unwind"];
    bb24__0_34 -> bb25__0_34 [label="return"];
    bb24__0_34 -> bb32__0_34 [label="unwind"];
    bb25__0_34 -> bb26__0_34 [label="return"];
    bb25__0_34 -> bb32__0_34 [label="unwind"];
    bb26__0_34 -> bb27__0_34 [label="return"];
    bb26__0_34 -> bb32__0_34 [label="unwind"];
    bb27__0_34 -> bb28__0_34 [label="return"];
    bb27__0_34 -> bb35__0_34 [label="unwind"];
    bb28__0_34 -> bb29__0_34 [label="return"];
    bb28__0_34 -> bb35__0_34 [label="unwind"];
    bb29__0_34 -> bb30__0_34 [label="return"];
    bb29__0_34 -> bb32__0_34 [label="unwind"];
    bb30__0_34 -> bb31__0_34 [label="return"];
    bb32__0_34 -> bb33__0_34 [label="return"];
    bb34__0_34 -> bb32__0_34 [label="return"];
    bb35__0_34 -> bb32__0_34 [label="false"];
    bb35__0_34 -> bb34__0_34 [label="otherwise"];
}
subgraph cluster_Mir_0_31 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn xor_block(_1: &amp;[secret_integers::U8; 64], _2: &amp;[secret_integers::U8; 64]) -&gt; [secret_integers::U8; 64]<br align="left"/>let mut _3: [secret_integers::U8; 64];<br align="left"/>let mut _4: secret_integers::U8;<br align="left"/>let mut _5: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _6: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _7: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _8: usize;<br align="left"/>let mut _9: std::option::Option&lt;usize&gt;;<br align="left"/>let mut _10: &amp;mut std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _11: &amp;mut std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _12: isize;<br align="left"/>let _13: usize;<br align="left"/>let mut _14: usize;<br align="left"/>let _15: usize;<br align="left"/>let mut _16: secret_integers::U8;<br align="left"/>let mut _17: secret_integers::U8;<br align="left"/>let _18: usize;<br align="left"/>let mut _19: usize;<br align="left"/>let mut _20: bool;<br align="left"/>let mut _21: secret_integers::U8;<br align="left"/>let _22: usize;<br align="left"/>let mut _23: usize;<br align="left"/>let mut _24: bool;<br align="left"/>let _25: usize;<br align="left"/>let mut _26: usize;<br align="left"/>let mut _27: bool;<br align="left"/>let mut _28: secret_integers::U8;<br align="left"/>let _29: ();<br align="left"/>let mut _30: &amp;mut [secret_integers::U8];<br align="left"/>let mut _31: &amp;mut [secret_integers::U8; 64];<br align="left"/>let mut _32: &amp;[secret_integers::U8];<br align="left"/>let mut _33: &amp;[secret_integers::U8; 64];<br align="left"/>let _34: &amp;[secret_integers::U8; 64];<br align="left"/>debug block =&gt; _1;<br align="left"/>debug key_block =&gt; _2;<br align="left"/>debug v_out =&gt; _3;<br align="left"/>debug iter =&gt; _7;<br align="left"/>debug __next =&gt; _8;<br align="left"/>debug val =&gt; _13;<br align="left"/>debug i =&gt; _15;<br align="left"/>debug out =&gt; _0;<br align="left"/>>;
    bb0__0_31 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left">_4 = &lt;secret_integers::U8 as std::default::Default&gt;::default()</td></tr></table>>];
    bb1__0_31 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_3 = [move _4; BLOCK_SIZE]<br/>(_6.0: usize) = const 0_usize<br/>(_6.1: usize) = const 64_usize<br/></td></tr><tr><td align="left">_5 = &lt;std::ops::Range&lt;usize&gt; as std::iter::IntoIterator&gt;::into_iter(move _6)</td></tr></table>>];
    bb2__0_31 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_7 = move _5<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb3__0_31 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_11 = &amp;mut _7<br/>_10 = &amp;mut (*_11)<br/></td></tr><tr><td align="left">_9 = &lt;std::ops::Range&lt;usize&gt; as std::iter::Iterator&gt;::next(move _10)</td></tr></table>>];
    bb4__0_31 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_12 = discriminant(_9)<br/></td></tr><tr><td align="left">switchInt(move _12)</td></tr></table>>];
    bb5__0_31 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">_28 = &lt;secret_integers::U8 as std::default::Default&gt;::default()</td></tr></table>>];
    bb6__0_31 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb7__0_31 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_13 = ((_9 as Some).0: usize)<br/>_14 = _13<br/>_8 = move _14<br/>_15 = _8<br/>_18 = _15<br/>_19 = const 64_usize<br/>_20 = Lt(_18, _19)<br/></td></tr><tr><td align="left">assert(move _20, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _19, _18)</td></tr></table>>];
    bb8__0_31 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">_17 = (*_1)[_18]<br/>_22 = _15<br/>_23 = const 64_usize<br/>_24 = Lt(_22, _23)<br/></td></tr><tr><td align="left">assert(move _24, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _23, _22)</td></tr></table>>];
    bb9__0_31 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">_21 = (*_2)[_22]<br/></td></tr><tr><td align="left">_16 = &lt;secret_integers::U8 as std::ops::BitXor&gt;::bitxor(move _17, move _21)</td></tr></table>>];
    bb10__0_31 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">_25 = _15<br/>_26 = const 64_usize<br/>_27 = Lt(_25, _26)<br/></td></tr><tr><td align="left">assert(move _27, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _26, _25)</td></tr></table>>];
    bb11__0_31 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">_3[_25] = move _16<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_31 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">_0 = [move _28; BLOCK_SIZE]<br/>_31 = &amp;mut _0<br/>_30 = move _31 as &amp;mut [secret_integers::U8] (Pointer(Unsize))<br/>_34 = &amp;_3<br/>_33 = _34<br/>_32 = move _33 as &amp;[secret_integers::U8] (Pointer(Unsize))<br/></td></tr><tr><td align="left">_29 = core::slice::&lt;impl [secret_integers::U8]&gt;::copy_from_slice(move _30, move _32)</td></tr></table>>];
    bb13__0_31 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_31 -> bb1__0_31 [label="return"];
    bb1__0_31 -> bb2__0_31 [label="return"];
    bb2__0_31 -> bb3__0_31 [label=""];
    bb3__0_31 -> bb4__0_31 [label="return"];
    bb4__0_31 -> bb5__0_31 [label="0_isize"];
    bb4__0_31 -> bb7__0_31 [label="1_isize"];
    bb4__0_31 -> bb6__0_31 [label="otherwise"];
    bb5__0_31 -> bb12__0_31 [label="return"];
    bb7__0_31 -> bb8__0_31 [label=""];
    bb8__0_31 -> bb9__0_31 [label=""];
    bb9__0_31 -> bb10__0_31 [label="return"];
    bb10__0_31 -> bb11__0_31 [label=""];
    bb11__0_31 -> bb3__0_31 [label=""];
    bb12__0_31 -> bb13__0_31 [label="return"];
}
subgraph cluster_Mir_0_28 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn chacha20(_1: &amp;std::vec::Vec&lt;secret_integers::U8&gt;, _2: secret_integers::U32, _3: &amp;std::vec::Vec&lt;secret_integers::U8&gt;) -&gt; [secret_integers::U32; 16]<br align="left"/>let mut _4: &amp;std::vec::Vec&lt;secret_integers::U8&gt;;<br align="left"/>let mut _5: secret_integers::U32;<br align="left"/>let mut _6: &amp;std::vec::Vec&lt;secret_integers::U8&gt;;<br align="left"/>let _7: ();<br align="left"/>let mut _8: &amp;mut [secret_integers::U32; 16];<br align="left"/>let mut _9: &amp;mut [secret_integers::U32; 16];<br align="left"/>debug k =&gt; _1;<br align="left"/>debug counter =&gt; _2;<br align="left"/>debug nonce =&gt; _3;<br align="left"/>debug st =&gt; _0;<br align="left"/>>;
    bb0__0_28 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_4 = _1<br/>_5 = _2<br/>_6 = _3<br/></td></tr><tr><td align="left">_0 = chacha20_init(move _4, move _5, move _6)</td></tr></table>>];
    bb1__0_28 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_9 = &amp;mut _0<br/>_8 = &amp;mut (*_9)<br/></td></tr><tr><td align="left">_7 = chacha20_core(move _8)</td></tr></table>>];
    bb2__0_28 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_28 -> bb1__0_28 [label="return"];
    bb1__0_28 -> bb2__0_28 [label="return"];
}
subgraph cluster_Mir_0_25 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn chacha20_init(_1: &amp;std::vec::Vec&lt;secret_integers::U8&gt;, _2: secret_integers::U32, _3: &amp;std::vec::Vec&lt;secret_integers::U8&gt;) -&gt; [secret_integers::U32; 16]<br align="left"/>let mut _4: secret_integers::U32;<br align="left"/>let _5: ();<br align="left"/>let mut _6: &amp;mut [secret_integers::U32];<br align="left"/>let mut _7: &amp;mut [secret_integers::U32];<br align="left"/>let mut _8: &amp;mut [secret_integers::U32; 16];<br align="left"/>let mut _9: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _10: &amp;[secret_integers::U32];<br align="left"/>let _11: &amp;[secret_integers::U32];<br align="left"/>let mut _12: &amp;std::vec::Vec&lt;secret_integers::U32&gt;;<br align="left"/>let _13: &amp;std::vec::Vec&lt;secret_integers::U32&gt;;<br align="left"/>let _14: std::vec::Vec&lt;secret_integers::U32&gt;;<br align="left"/>let mut _15: &amp;[u32];<br align="left"/>let mut _16: &amp;[u32; 4];<br align="left"/>let _17: &amp;[u32; 4];<br align="left"/>let _18: ();<br align="left"/>let mut _19: &amp;mut [secret_integers::U32];<br align="left"/>let mut _20: &amp;mut [secret_integers::U32];<br align="left"/>let mut _21: &amp;mut [secret_integers::U32; 16];<br align="left"/>let mut _22: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _23: &amp;[secret_integers::U32];<br align="left"/>let _24: &amp;[secret_integers::U32];<br align="left"/>let mut _25: &amp;std::vec::Vec&lt;secret_integers::U32&gt;;<br align="left"/>let _26: std::vec::Vec&lt;secret_integers::U32&gt;;<br align="left"/>let mut _27: &amp;[secret_integers::U8];<br align="left"/>let _28: &amp;[secret_integers::U8];<br align="left"/>let mut _29: &amp;std::vec::Vec&lt;secret_integers::U8&gt;;<br align="left"/>let mut _30: secret_integers::U32;<br align="left"/>let _31: usize;<br align="left"/>let _32: ();<br align="left"/>let mut _33: &amp;mut [secret_integers::U32];<br align="left"/>let mut _34: &amp;mut [secret_integers::U32];<br align="left"/>let mut _35: &amp;mut [secret_integers::U32; 16];<br align="left"/>let mut _36: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _37: &amp;[secret_integers::U32];<br align="left"/>let _38: &amp;[secret_integers::U32];<br align="left"/>let mut _39: &amp;std::vec::Vec&lt;secret_integers::U32&gt;;<br align="left"/>let _40: std::vec::Vec&lt;secret_integers::U32&gt;;<br align="left"/>let mut _41: &amp;[secret_integers::U8];<br align="left"/>let _42: &amp;[secret_integers::U8];<br align="left"/>let mut _43: &amp;std::vec::Vec&lt;secret_integers::U8&gt;;<br align="left"/>let mut _44: &amp;[u32; 4];<br align="left"/>debug k =&gt; _1;<br align="left"/>debug counter =&gt; _2;<br align="left"/>debug nonce =&gt; _3;<br align="left"/>debug st =&gt; _0;<br align="left"/>>;
    bb0__0_25 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left">_4 = secret_integers::U32::classify::&lt;u32&gt;(const 0_u32)</td></tr></table>>];
    bb1__0_25 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_0 = [move _4; 16]<br/>_8 = &amp;mut _0<br/>(_9.0: usize) = const 0_usize<br/>(_9.1: usize) = const 4_usize<br/></td></tr><tr><td align="left">_7 = &lt;[secret_integers::U32; 16] as std::ops::IndexMut&lt;std::ops::Range&lt;usize&gt;&gt;&gt;::index_mut(move _8, move _9)</td></tr></table>>];
    bb2__0_25 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_6 = &amp;mut (*_7)<br/>_44 = const chacha20_init::promoted[0]<br/>_17 = _44<br/>_16 = _17<br/>_15 = move _16 as &amp;[u32] (Pointer(Unsize))<br/></td></tr><tr><td align="left">_14 = classify_u32s(move _15)</td></tr></table>>];
    bb3__0_25 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_13 = &amp;_14<br/>_12 = _13<br/></td></tr><tr><td align="left">_11 = &lt;std::vec::Vec&lt;secret_integers::U32&gt; as std::ops::Deref&gt;::deref(move _12)</td></tr></table>>];
    bb4__0_25 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_10 = _11<br/></td></tr><tr><td align="left">_5 = core::slice::&lt;impl [secret_integers::U32]&gt;::copy_from_slice(move _6, move _10)</td></tr></table>>];
    bb5__0_25 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">drop(_14)</td></tr></table>>];
    bb6__0_25 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">_21 = &amp;mut _0<br/>(_22.0: usize) = const 4_usize<br/>(_22.1: usize) = const 12_usize<br/></td></tr><tr><td align="left">_20 = &lt;[secret_integers::U32; 16] as std::ops::IndexMut&lt;std::ops::Range&lt;usize&gt;&gt;&gt;::index_mut(move _21, move _22)</td></tr></table>>];
    bb7__0_25 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_19 = &amp;mut (*_20)<br/>_29 = _1<br/></td></tr><tr><td align="left">_28 = &lt;std::vec::Vec&lt;secret_integers::U8&gt; as std::ops::Deref&gt;::deref(move _29)</td></tr></table>>];
    bb8__0_25 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">_27 = _28<br/></td></tr><tr><td align="left">_26 = secret_integers::U32::from_bytes_le(move _27)</td></tr></table>>];
    bb9__0_25 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">_25 = &amp;_26<br/></td></tr><tr><td align="left">_24 = std::vec::Vec::&lt;secret_integers::U32&gt;::as_slice(move _25)</td></tr></table>>];
    bb10__0_25 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">_23 = _24<br/></td></tr><tr><td align="left">_18 = core::slice::&lt;impl [secret_integers::U32]&gt;::copy_from_slice(move _19, move _23)</td></tr></table>>];
    bb11__0_25 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left">drop(_26)</td></tr></table>>];
    bb12__0_25 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">_30 = _2<br/>_31 = const 12_usize<br/>_0[_31] = move _30<br/>_35 = &amp;mut _0<br/>(_36.0: usize) = const 13_usize<br/>(_36.1: usize) = const 16_usize<br/></td></tr><tr><td align="left">_34 = &lt;[secret_integers::U32; 16] as std::ops::IndexMut&lt;std::ops::Range&lt;usize&gt;&gt;&gt;::index_mut(move _35, move _36)</td></tr></table>>];
    bb13__0_25 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">_33 = &amp;mut (*_34)<br/>_43 = _3<br/></td></tr><tr><td align="left">_42 = &lt;std::vec::Vec&lt;secret_integers::U8&gt; as std::ops::Deref&gt;::deref(move _43)</td></tr></table>>];
    bb14__0_25 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">_41 = _42<br/></td></tr><tr><td align="left">_40 = secret_integers::U32::from_bytes_le(move _41)</td></tr></table>>];
    bb15__0_25 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">_39 = &amp;_40<br/></td></tr><tr><td align="left">_38 = std::vec::Vec::&lt;secret_integers::U32&gt;::as_slice(move _39)</td></tr></table>>];
    bb16__0_25 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">_37 = _38<br/></td></tr><tr><td align="left">_32 = core::slice::&lt;impl [secret_integers::U32]&gt;::copy_from_slice(move _33, move _37)</td></tr></table>>];
    bb17__0_25 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left">drop(_40)</td></tr></table>>];
    bb18__0_25 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left">return</td></tr></table>>];
    bb19__0_25 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">19 (cleanup)</td></tr><tr><td align="left">drop(_40)</td></tr></table>>];
    bb20__0_25 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">20 (cleanup)</td></tr><tr><td align="left">drop(_26)</td></tr></table>>];
    bb21__0_25 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">21 (cleanup)</td></tr><tr><td align="left">drop(_14)</td></tr></table>>];
    bb22__0_25 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">22 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_25 -> bb1__0_25 [label="return"];
    bb1__0_25 -> bb2__0_25 [label="return"];
    bb2__0_25 -> bb3__0_25 [label="return"];
    bb3__0_25 -> bb4__0_25 [label="return"];
    bb3__0_25 -> bb21__0_25 [label="unwind"];
    bb4__0_25 -> bb5__0_25 [label="return"];
    bb4__0_25 -> bb21__0_25 [label="unwind"];
    bb5__0_25 -> bb6__0_25 [label="return"];
    bb6__0_25 -> bb7__0_25 [label="return"];
    bb7__0_25 -> bb8__0_25 [label="return"];
    bb8__0_25 -> bb9__0_25 [label="return"];
    bb9__0_25 -> bb10__0_25 [label="return"];
    bb9__0_25 -> bb20__0_25 [label="unwind"];
    bb10__0_25 -> bb11__0_25 [label="return"];
    bb10__0_25 -> bb20__0_25 [label="unwind"];
    bb11__0_25 -> bb12__0_25 [label="return"];
    bb12__0_25 -> bb13__0_25 [label="return"];
    bb13__0_25 -> bb14__0_25 [label="return"];
    bb14__0_25 -> bb15__0_25 [label="return"];
    bb15__0_25 -> bb16__0_25 [label="return"];
    bb15__0_25 -> bb19__0_25 [label="unwind"];
    bb16__0_25 -> bb17__0_25 [label="return"];
    bb16__0_25 -> bb19__0_25 [label="unwind"];
    bb17__0_25 -> bb18__0_25 [label="return"];
    bb19__0_25 -> bb22__0_25 [label="return"];
    bb20__0_25 -> bb22__0_25 [label="return"];
    bb21__0_25 -> bb22__0_25 [label="return"];
}
subgraph cluster_Mir_0_22 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn quarter_round(_1: usize, _2: usize, _3: usize, _4: usize, _5: &amp;mut [secret_integers::U32; 16]) -&gt; ()<br align="left"/>let _6: ();<br align="left"/>let mut _7: usize;<br align="left"/>let mut _8: usize;<br align="left"/>let mut _9: usize;<br align="left"/>let mut _10: &amp;mut [secret_integers::U32; 16];<br align="left"/>let _11: ();<br align="left"/>let mut _12: usize;<br align="left"/>let mut _13: usize;<br align="left"/>let mut _14: usize;<br align="left"/>let mut _15: &amp;mut [secret_integers::U32; 16];<br align="left"/>let _16: ();<br align="left"/>let mut _17: usize;<br align="left"/>let mut _18: usize;<br align="left"/>let mut _19: usize;<br align="left"/>let mut _20: &amp;mut [secret_integers::U32; 16];<br align="left"/>let _21: ();<br align="left"/>let mut _22: usize;<br align="left"/>let mut _23: usize;<br align="left"/>let mut _24: usize;<br align="left"/>let mut _25: &amp;mut [secret_integers::U32; 16];<br align="left"/>debug a =&gt; _1;<br align="left"/>debug b =&gt; _2;<br align="left"/>debug c =&gt; _3;<br align="left"/>debug d =&gt; _4;<br align="left"/>debug m =&gt; _5;<br align="left"/>>;
    bb0__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_7 = _1<br/>_8 = _2<br/>_9 = _4<br/>_10 = &amp;mut (*_5)<br/></td></tr><tr><td align="left">_6 = line(move _7, move _8, move _9, const 16_u32, move _10)</td></tr></table>>];
    bb1__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_12 = _3<br/>_13 = _4<br/>_14 = _2<br/>_15 = &amp;mut (*_5)<br/></td></tr><tr><td align="left">_11 = line(move _12, move _13, move _14, const 12_u32, move _15)</td></tr></table>>];
    bb2__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_17 = _1<br/>_18 = _2<br/>_19 = _4<br/>_20 = &amp;mut (*_5)<br/></td></tr><tr><td align="left">_16 = line(move _17, move _18, move _19, const 8_u32, move _20)</td></tr></table>>];
    bb3__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_22 = _3<br/>_23 = _4<br/>_24 = _2<br/>_25 = &amp;mut (*_5)<br/></td></tr><tr><td align="left">_21 = line(move _22, move _23, move _24, const 7_u32, move _25)</td></tr></table>>];
    bb4__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_0 = const ()<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_22 -> bb1__0_22 [label="return"];
    bb1__0_22 -> bb2__0_22 [label="return"];
    bb2__0_22 -> bb3__0_22 [label="return"];
    bb3__0_22 -> bb4__0_22 [label="return"];
}
subgraph cluster_Mir_0_19 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn declassify_u8s(_1: &amp;[secret_integers::U8]) -&gt; std::vec::Vec&lt;u8&gt;<br align="left"/>let mut _2: std::iter::Map&lt;std::slice::Iter&lt;secret_integers::U8&gt;, [closure@chacha20/src/main.rs:21:18: 21:40]&gt;;<br align="left"/>let mut _3: std::slice::Iter&lt;secret_integers::U8&gt;;<br align="left"/>let mut _4: &amp;[secret_integers::U8];<br align="left"/>let mut _5: [closure@chacha20/src/main.rs:21:18: 21:40];<br align="left"/>debug v =&gt; _1;<br align="left"/>>;
    bb0__0_19 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_4 = _1<br/></td></tr><tr><td align="left">_3 = core::slice::&lt;impl [secret_integers::U8]&gt;::iter(move _4)</td></tr></table>>];
    bb1__0_19 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left">_2 = &lt;std::slice::Iter&lt;secret_integers::U8&gt; as std::iter::Iterator&gt;::map::&lt;u8, [closure@chacha20/src/main.rs:21:18: 21:40]&gt;(move _3, move _5)</td></tr></table>>];
    bb2__0_19 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left">_0 = &lt;std::iter::Map&lt;std::slice::Iter&lt;secret_integers::U8&gt;, [closure@chacha20/src/main.rs:21:18: 21:40]&gt; as std::iter::Iterator&gt;::collect::&lt;std::vec::Vec&lt;u8&gt;&gt;(move _2)</td></tr></table>>];
    bb3__0_19 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_19 -> bb1__0_19 [label="return"];
    bb1__0_19 -> bb2__0_19 [label="return"];
    bb2__0_19 -> bb3__0_19 [label="return"];
}
subgraph cluster_Mir_0_16 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn classify_u32s::{closure#0}(_1: &amp;mut [closure@chacha20/src/main.rs:13:18: 13:39], _2: &amp;u32) -&gt; secret_integers::U32<br align="left"/>let mut _3: u32;<br align="left"/>debug x =&gt; _2;<br align="left"/>>;
    bb0__0_16 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_3 = (*_2)<br/></td></tr><tr><td align="left">_0 = secret_integers::U32::classify::&lt;u32&gt;(move _3)</td></tr></table>>];
    bb1__0_16 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_16 -> bb1__0_16 [label="return"];
}
subgraph cluster_Mir_0_10 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn Block::{constant#0}() -&gt; usize<br align="left"/>>;
    bb0__0_10 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_0 = const 64_usize<br/></td></tr><tr><td align="left">return</td></tr></table>>];
}
subgraph cluster_Mir_0_4 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn BLOCK_SIZE() -&gt; usize<br align="left"/>>;
    bb0__0_4 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_0 = const 64_usize<br/></td></tr><tr><td align="left">return</td></tr></table>>];
}
subgraph cluster_Mir_0_41 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn chacha20_decrypt(_1: &amp;std::vec::Vec&lt;secret_integers::U8&gt;, _2: u32, _3: &amp;std::vec::Vec&lt;u8&gt;, _4: &amp;std::vec::Vec&lt;u8&gt;) -&gt; std::vec::Vec&lt;u8&gt;<br align="left"/>let _5: &amp;std::vec::Vec&lt;secret_integers::U8&gt;;<br align="left"/>let _6: std::vec::Vec&lt;secret_integers::U8&gt;;<br align="left"/>let mut _7: &amp;[u8];<br align="left"/>let _8: &amp;[u8];<br align="left"/>let mut _9: &amp;std::vec::Vec&lt;u8&gt;;<br align="left"/>let _10: &amp;std::vec::Vec&lt;secret_integers::U8&gt;;<br align="left"/>let _11: std::vec::Vec&lt;secret_integers::U8&gt;;<br align="left"/>let mut _12: &amp;[u8];<br align="left"/>let _13: &amp;[u8];<br align="left"/>let mut _14: &amp;std::vec::Vec&lt;u8&gt;;<br align="left"/>let mut _15: &amp;[secret_integers::U8];<br align="left"/>let _16: &amp;[secret_integers::U8];<br align="left"/>let mut _17: &amp;std::vec::Vec&lt;secret_integers::U8&gt;;<br align="left"/>let _18: &amp;std::vec::Vec&lt;secret_integers::U8&gt;;<br align="left"/>let _19: std::vec::Vec&lt;secret_integers::U8&gt;;<br align="left"/>let mut _20: &amp;std::vec::Vec&lt;secret_integers::U8&gt;;<br align="left"/>let mut _21: secret_integers::U32;<br align="left"/>let mut _22: u32;<br align="left"/>let mut _23: &amp;std::vec::Vec&lt;secret_integers::U8&gt;;<br align="left"/>let mut _24: &amp;std::vec::Vec&lt;secret_integers::U8&gt;;<br align="left"/>debug key =&gt; _1;<br align="left"/>debug counter =&gt; _2;<br align="left"/>debug nonce =&gt; _3;<br align="left"/>debug msg =&gt; _4;<br align="left"/>debug nonce =&gt; _5;<br align="left"/>debug msg =&gt; _10;<br align="left"/>>;
    bb0__0_41 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_9 = _3<br/></td></tr><tr><td align="left">_8 = &lt;std::vec::Vec&lt;u8&gt; as std::ops::Deref&gt;::deref(move _9)</td></tr></table>>];
    bb1__0_41 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_7 = _8<br/></td></tr><tr><td align="left">_6 = classify_u8s(move _7)</td></tr></table>>];
    bb2__0_41 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_5 = &amp;_6<br/>_14 = _4<br/></td></tr><tr><td align="left">_13 = &lt;std::vec::Vec&lt;u8&gt; as std::ops::Deref&gt;::deref(move _14)</td></tr></table>>];
    bb3__0_41 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_12 = _13<br/></td></tr><tr><td align="left">_11 = classify_u8s(move _12)</td></tr></table>>];
    bb4__0_41 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_10 = &amp;_11<br/>_20 = _1<br/>_22 = _2<br/></td></tr><tr><td align="left">_21 = &lt;u32 as std::convert::Into&lt;secret_integers::U32&gt;&gt;::into(move _22)</td></tr></table>>];
    bb5__0_41 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">_23 = _5<br/>_24 = _10<br/></td></tr><tr><td align="left">_19 = chacha20_counter_mode(move _20, move _21, move _23, move _24)</td></tr></table>>];
    bb6__0_41 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">_18 = &amp;_19<br/>_17 = _18<br/></td></tr><tr><td align="left">_16 = &lt;std::vec::Vec&lt;secret_integers::U8&gt; as std::ops::Deref&gt;::deref(move _17)</td></tr></table>>];
    bb7__0_41 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_15 = _16<br/></td></tr><tr><td align="left">_0 = declassify_u8s(move _15)</td></tr></table>>];
    bb8__0_41 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left">drop(_11)</td></tr></table>>];
    bb9__0_41 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left">drop(_6)</td></tr></table>>];
    bb10__0_41 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left">drop(_19)</td></tr></table>>];
    bb11__0_41 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left">return</td></tr></table>>];
    bb12__0_41 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">12 (cleanup)</td></tr><tr><td align="left">drop(_11)</td></tr></table>>];
    bb13__0_41 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">13 (cleanup)</td></tr><tr><td align="left">drop(_6)</td></tr></table>>];
    bb14__0_41 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">14 (cleanup)</td></tr><tr><td align="left">drop(_19)</td></tr></table>>];
    bb15__0_41 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">15 (cleanup)</td></tr><tr><td align="left">drop(_11)</td></tr></table>>];
    bb16__0_41 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">16 (cleanup)</td></tr><tr><td align="left">drop(_6)</td></tr></table>>];
    bb17__0_41 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">17 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_41 -> bb1__0_41 [label="return"];
    bb1__0_41 -> bb2__0_41 [label="return"];
    bb2__0_41 -> bb3__0_41 [label="return"];
    bb2__0_41 -> bb16__0_41 [label="unwind"];
    bb3__0_41 -> bb4__0_41 [label="return"];
    bb3__0_41 -> bb16__0_41 [label="unwind"];
    bb4__0_41 -> bb5__0_41 [label="return"];
    bb4__0_41 -> bb15__0_41 [label="unwind"];
    bb5__0_41 -> bb6__0_41 [label="return"];
    bb5__0_41 -> bb15__0_41 [label="unwind"];
    bb6__0_41 -> bb7__0_41 [label="return"];
    bb6__0_41 -> bb12__0_41 [label="unwind"];
    bb7__0_41 -> bb8__0_41 [label="return"];
    bb7__0_41 -> bb12__0_41 [label="unwind"];
    bb8__0_41 -> bb9__0_41 [label="return"];
    bb8__0_41 -> bb13__0_41 [label="unwind"];
    bb9__0_41 -> bb10__0_41 [label="return"];
    bb9__0_41 -> bb14__0_41 [label="unwind"];
    bb10__0_41 -> bb11__0_41 [label="return"];
    bb12__0_41 -> bb13__0_41 [label="return"];
    bb13__0_41 -> bb14__0_41 [label="return"];
    bb14__0_41 -> bb17__0_41 [label="return"];
    bb15__0_41 -> bb16__0_41 [label="return"];
    bb16__0_41 -> bb17__0_41 [label="return"];
}
subgraph cluster_Mir_0_38 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn chacha20_counter_mode::{constant#1}() -&gt; usize<br align="left"/>>;
    bb0__0_38 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_0 = const BLOCK_SIZE<br/></td></tr><tr><td align="left">return</td></tr></table>>];
}
subgraph cluster_Mir_0_35 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn chacha20_counter_mode::{constant#0}() -&gt; usize<br align="left"/>>;
    bb0__0_35 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_0 = const BLOCK_SIZE<br/></td></tr><tr><td align="left">return</td></tr></table>>];
}
subgraph cluster_Mir_0_32 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn xor_block::{constant#0}() -&gt; usize<br align="left"/>>;
    bb0__0_32 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_0 = const BLOCK_SIZE<br/></td></tr><tr><td align="left">return</td></tr></table>>];
}
subgraph cluster_Mir_0_29 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn chacha20_block(_1: &amp;std::vec::Vec&lt;secret_integers::U8&gt;, _2: secret_integers::U32, _3: &amp;std::vec::Vec&lt;secret_integers::U8&gt;) -&gt; [secret_integers::U8; 64]<br align="left"/>let _4: [secret_integers::U32; 16];<br align="left"/>let mut _5: &amp;std::vec::Vec&lt;secret_integers::U8&gt;;<br align="left"/>let mut _6: secret_integers::U32;<br align="left"/>let mut _7: &amp;std::vec::Vec&lt;secret_integers::U8&gt;;<br align="left"/>let mut _8: secret_integers::U8;<br align="left"/>let _9: ();<br align="left"/>let mut _10: &amp;mut [secret_integers::U8];<br align="left"/>let mut _11: &amp;mut [secret_integers::U8; 64];<br align="left"/>let mut _12: &amp;[secret_integers::U8];<br align="left"/>let _13: &amp;[secret_integers::U8];<br align="left"/>let mut _14: &amp;std::vec::Vec&lt;secret_integers::U8&gt;;<br align="left"/>let _15: std::vec::Vec&lt;secret_integers::U8&gt;;<br align="left"/>let mut _16: &amp;[secret_integers::U32];<br align="left"/>let mut _17: &amp;[secret_integers::U32; 16];<br align="left"/>let _18: &amp;[secret_integers::U32; 16];<br align="left"/>debug k =&gt; _1;<br align="left"/>debug counter =&gt; _2;<br align="left"/>debug nonce =&gt; _3;<br align="left"/>debug st =&gt; _4;<br align="left"/>debug block =&gt; _0;<br align="left"/>>;
    bb0__0_29 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_5 = _1<br/>_6 = _2<br/>_7 = _3<br/></td></tr><tr><td align="left">_4 = chacha20(move _5, move _6, move _7)</td></tr></table>>];
    bb1__0_29 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left">_8 = secret_integers::U8::classify::&lt;u8&gt;(const 0_u8)</td></tr></table>>];
    bb2__0_29 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_0 = [move _8; BLOCK_SIZE]<br/>_11 = &amp;mut _0<br/>_10 = move _11 as &amp;mut [secret_integers::U8] (Pointer(Unsize))<br/>_18 = &amp;_4<br/>_17 = _18<br/>_16 = move _17 as &amp;[secret_integers::U32] (Pointer(Unsize))<br/></td></tr><tr><td align="left">_15 = secret_integers::U32::to_bytes_le(move _16)</td></tr></table>>];
    bb3__0_29 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_14 = &amp;_15<br/></td></tr><tr><td align="left">_13 = std::vec::Vec::&lt;secret_integers::U8&gt;::as_slice(move _14)</td></tr></table>>];
    bb4__0_29 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_12 = _13<br/></td></tr><tr><td align="left">_9 = core::slice::&lt;impl [secret_integers::U8]&gt;::copy_from_slice(move _10, move _12)</td></tr></table>>];
    bb5__0_29 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">drop(_15)</td></tr></table>>];
    bb6__0_29 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left">return</td></tr></table>>];
    bb7__0_29 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">7 (cleanup)</td></tr><tr><td align="left">drop(_15)</td></tr></table>>];
    bb8__0_29 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">8 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_29 -> bb1__0_29 [label="return"];
    bb1__0_29 -> bb2__0_29 [label="return"];
    bb2__0_29 -> bb3__0_29 [label="return"];
    bb3__0_29 -> bb4__0_29 [label="return"];
    bb3__0_29 -> bb7__0_29 [label="unwind"];
    bb4__0_29 -> bb5__0_29 [label="return"];
    bb4__0_29 -> bb7__0_29 [label="unwind"];
    bb5__0_29 -> bb6__0_29 [label="return"];
    bb7__0_29 -> bb8__0_29 [label="return"];
}
subgraph cluster_Mir_0_26 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn chacha20_init::{constant#0}() -&gt; usize<br align="left"/>>;
    bb0__0_26 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_0 = const 16_usize<br/></td></tr><tr><td align="left">return</td></tr></table>>];
}
subgraph cluster_Mir_0_23 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn double_round(_1: &amp;mut [secret_integers::U32; 16]) -&gt; ()<br align="left"/>let _2: ();<br align="left"/>let mut _3: &amp;mut [secret_integers::U32; 16];<br align="left"/>let _4: ();<br align="left"/>let mut _5: &amp;mut [secret_integers::U32; 16];<br align="left"/>let _6: ();<br align="left"/>let mut _7: &amp;mut [secret_integers::U32; 16];<br align="left"/>let _8: ();<br align="left"/>let mut _9: &amp;mut [secret_integers::U32; 16];<br align="left"/>let _10: ();<br align="left"/>let mut _11: &amp;mut [secret_integers::U32; 16];<br align="left"/>let _12: ();<br align="left"/>let mut _13: &amp;mut [secret_integers::U32; 16];<br align="left"/>let _14: ();<br align="left"/>let mut _15: &amp;mut [secret_integers::U32; 16];<br align="left"/>let _16: ();<br align="left"/>let mut _17: &amp;mut [secret_integers::U32; 16];<br align="left"/>debug m =&gt; _1;<br align="left"/>>;
    bb0__0_23 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_3 = &amp;mut (*_1)<br/></td></tr><tr><td align="left">_2 = quarter_round(const 0_usize, const 4_usize, const 8_usize, const 12_usize, move _3)</td></tr></table>>];
    bb1__0_23 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_5 = &amp;mut (*_1)<br/></td></tr><tr><td align="left">_4 = quarter_round(const 1_usize, const 5_usize, const 9_usize, const 13_usize, move _5)</td></tr></table>>];
    bb2__0_23 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_7 = &amp;mut (*_1)<br/></td></tr><tr><td align="left">_6 = quarter_round(const 2_usize, const 6_usize, const 10_usize, const 14_usize, move _7)</td></tr></table>>];
    bb3__0_23 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_9 = &amp;mut (*_1)<br/></td></tr><tr><td align="left">_8 = quarter_round(const 3_usize, const 7_usize, const 11_usize, const 15_usize, move _9)</td></tr></table>>];
    bb4__0_23 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_11 = &amp;mut (*_1)<br/></td></tr><tr><td align="left">_10 = quarter_round(const 0_usize, const 5_usize, const 10_usize, const 15_usize, move _11)</td></tr></table>>];
    bb5__0_23 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">_13 = &amp;mut (*_1)<br/></td></tr><tr><td align="left">_12 = quarter_round(const 1_usize, const 6_usize, const 11_usize, const 12_usize, move _13)</td></tr></table>>];
    bb6__0_23 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">_15 = &amp;mut (*_1)<br/></td></tr><tr><td align="left">_14 = quarter_round(const 2_usize, const 7_usize, const 8_usize, const 13_usize, move _15)</td></tr></table>>];
    bb7__0_23 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_17 = &amp;mut (*_1)<br/></td></tr><tr><td align="left">_16 = quarter_round(const 3_usize, const 4_usize, const 9_usize, const 14_usize, move _17)</td></tr></table>>];
    bb8__0_23 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">_0 = const ()<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_23 -> bb1__0_23 [label="return"];
    bb1__0_23 -> bb2__0_23 [label="return"];
    bb2__0_23 -> bb3__0_23 [label="return"];
    bb3__0_23 -> bb4__0_23 [label="return"];
    bb4__0_23 -> bb5__0_23 [label="return"];
    bb5__0_23 -> bb6__0_23 [label="return"];
    bb6__0_23 -> bb7__0_23 [label="return"];
    bb7__0_23 -> bb8__0_23 [label="return"];
}
subgraph cluster_Mir_0_20 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn declassify_u8s::{closure#0}(_1: &amp;mut [closure@chacha20/src/main.rs:21:18: 21:40], _2: &amp;secret_integers::U8) -&gt; u8<br align="left"/>let mut _3: secret_integers::U8;<br align="left"/>debug x =&gt; _2;<br align="left"/>>;
    bb0__0_20 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_3 = (*_2)<br/></td></tr><tr><td align="left">_0 = secret_integers::U8::declassify(move _3)</td></tr></table>>];
    bb1__0_20 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_20 -> bb1__0_20 [label="return"];
}
subgraph cluster_Mir_0_17 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn classify_u8s(_1: &amp;[u8]) -&gt; std::vec::Vec&lt;secret_integers::U8&gt;<br align="left"/>let mut _2: std::iter::Map&lt;std::slice::Iter&lt;u8&gt;, [closure@chacha20/src/main.rs:17:18: 17:38]&gt;;<br align="left"/>let mut _3: std::slice::Iter&lt;u8&gt;;<br align="left"/>let mut _4: &amp;[u8];<br align="left"/>let mut _5: [closure@chacha20/src/main.rs:17:18: 17:38];<br align="left"/>debug v =&gt; _1;<br align="left"/>>;
    bb0__0_17 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_4 = _1<br/></td></tr><tr><td align="left">_3 = core::slice::&lt;impl [u8]&gt;::iter(move _4)</td></tr></table>>];
    bb1__0_17 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left">_2 = &lt;std::slice::Iter&lt;u8&gt; as std::iter::Iterator&gt;::map::&lt;secret_integers::U8, [closure@chacha20/src/main.rs:17:18: 17:38]&gt;(move _3, move _5)</td></tr></table>>];
    bb2__0_17 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left">_0 = &lt;std::iter::Map&lt;std::slice::Iter&lt;u8&gt;, [closure@chacha20/src/main.rs:17:18: 17:38]&gt; as std::iter::Iterator&gt;::collect::&lt;std::vec::Vec&lt;secret_integers::U8&gt;&gt;(move _2)</td></tr></table>>];
    bb3__0_17 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_17 -> bb1__0_17 [label="return"];
    bb1__0_17 -> bb2__0_17 [label="return"];
    bb2__0_17 -> bb3__0_17 [label="return"];
}
subgraph cluster_Mir_0_42 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn main() -&gt; ()<br align="left"/>let _1: std::vec::Vec&lt;u8&gt;;<br align="left"/>let mut _2: std::boxed::Box&lt;[u8]&gt;;<br align="left"/>let mut _3: std::boxed::Box&lt;[u8; 114]&gt;;<br align="left"/>let mut _4: std::boxed::Box&lt;[u8; 114]&gt;;<br align="left"/>let _5: std::vec::Vec&lt;u8&gt;;<br align="left"/>let mut _6: std::boxed::Box&lt;[u8]&gt;;<br align="left"/>let mut _7: std::boxed::Box&lt;[u8; 114]&gt;;<br align="left"/>let mut _8: std::boxed::Box&lt;[u8; 114]&gt;;<br align="left"/>let _9: std::vec::Vec&lt;secret_integers::U8&gt;;<br align="left"/>let mut _10: &amp;[u8];<br align="left"/>let _11: &amp;[u8];<br align="left"/>let mut _12: &amp;std::vec::Vec&lt;u8&gt;;<br align="left"/>let _13: &amp;std::vec::Vec&lt;u8&gt;;<br align="left"/>let _14: std::vec::Vec&lt;u8&gt;;<br align="left"/>let mut _15: std::boxed::Box&lt;[u8]&gt;;<br align="left"/>let mut _16: std::boxed::Box&lt;[u8; 32]&gt;;<br align="left"/>let mut _17: std::boxed::Box&lt;[u8; 32]&gt;;<br align="left"/>let _18: std::vec::Vec&lt;u8&gt;;<br align="left"/>let mut _19: std::boxed::Box&lt;[u8]&gt;;<br align="left"/>let mut _20: std::boxed::Box&lt;[u8; 12]&gt;;<br align="left"/>let mut _21: std::boxed::Box&lt;[u8; 12]&gt;;<br align="left"/>let _22: std::vec::Vec&lt;u8&gt;;<br align="left"/>let mut _23: &amp;std::vec::Vec&lt;secret_integers::U8&gt;;<br align="left"/>let _24: &amp;std::vec::Vec&lt;secret_integers::U8&gt;;<br align="left"/>let mut _25: &amp;std::vec::Vec&lt;u8&gt;;<br align="left"/>let _26: &amp;std::vec::Vec&lt;u8&gt;;<br align="left"/>let mut _27: &amp;std::vec::Vec&lt;u8&gt;;<br align="left"/>let _28: &amp;std::vec::Vec&lt;u8&gt;;<br align="left"/>let mut _29: std::iter::Enumerate&lt;std::iter::Zip&lt;std::slice::Iter&lt;u8&gt;, std::vec::IntoIter&lt;u8&gt;&gt;&gt;;<br align="left"/>let mut _30: std::iter::Enumerate&lt;std::iter::Zip&lt;std::slice::Iter&lt;u8&gt;, std::vec::IntoIter&lt;u8&gt;&gt;&gt;;<br align="left"/>let mut _31: std::iter::Zip&lt;std::slice::Iter&lt;u8&gt;, std::vec::IntoIter&lt;u8&gt;&gt;;<br align="left"/>let mut _32: std::slice::Iter&lt;u8&gt;;<br align="left"/>let mut _33: &amp;[u8];<br align="left"/>let _34: &amp;[u8];<br align="left"/>let mut _35: &amp;std::vec::Vec&lt;u8&gt;;<br align="left"/>let mut _36: std::vec::Vec&lt;u8&gt;;<br align="left"/>let mut _37: std::iter::Enumerate&lt;std::iter::Zip&lt;std::slice::Iter&lt;u8&gt;, std::vec::IntoIter&lt;u8&gt;&gt;&gt;;<br align="left"/>let mut _38: (usize, (&amp;u8, u8));<br align="left"/>let mut _39: std::option::Option&lt;(usize, (&amp;u8, u8))&gt;;<br align="left"/>let mut _40: &amp;mut std::iter::Enumerate&lt;std::iter::Zip&lt;std::slice::Iter&lt;u8&gt;, std::vec::IntoIter&lt;u8&gt;&gt;&gt;;<br align="left"/>let mut _41: &amp;mut std::iter::Enumerate&lt;std::iter::Zip&lt;std::slice::Iter&lt;u8&gt;, std::vec::IntoIter&lt;u8&gt;&gt;&gt;;<br align="left"/>let mut _42: isize;<br align="left"/>let _43: (usize, (&amp;u8, u8));<br align="left"/>let mut _44: (usize, (&amp;u8, u8));<br align="left"/>let _45: usize;<br align="left"/>let _46: &amp;u8;<br align="left"/>let _47: u8;<br align="left"/>let mut _48: (&amp;u8, &amp;u8);<br align="left"/>let mut _49: &amp;u8;<br align="left"/>let mut _50: &amp;u8;<br align="left"/>let _51: &amp;u8;<br align="left"/>let _52: &amp;u8;<br align="left"/>let mut _53: bool;<br align="left"/>let mut _54: bool;<br align="left"/>let mut _55: u8;<br align="left"/>let mut _56: u8;<br align="left"/>let _57: core::panicking::AssertKind;<br align="left"/>let mut _58: core::panicking::AssertKind;<br align="left"/>let mut _59: &amp;u8;<br align="left"/>let _60: &amp;u8;<br align="left"/>let mut _61: &amp;u8;<br align="left"/>let _62: &amp;u8;<br align="left"/>let mut _63: std::option::Option&lt;std::fmt::Arguments&gt;;<br align="left"/>let mut _64: std::fmt::Arguments;<br align="left"/>let mut _65: &amp;[&amp;str];<br align="left"/>let mut _66: &amp;[&amp;str; 1];<br align="left"/>let _67: &amp;[&amp;str; 1];<br align="left"/>let mut _68: &amp;[std::fmt::ArgumentV1];<br align="left"/>let mut _69: &amp;[std::fmt::ArgumentV1; 1];<br align="left"/>let _70: &amp;[std::fmt::ArgumentV1; 1];<br align="left"/>let _71: [std::fmt::ArgumentV1; 1];<br align="left"/>let mut _72: (&amp;usize,);<br align="left"/>let mut _73: &amp;usize;<br align="left"/>let _74: &amp;usize;<br align="left"/>let mut _75: std::fmt::ArgumentV1;<br align="left"/>let mut _76: &amp;usize;<br align="left"/>let mut _77: for&lt;'r, 's, 't0&gt; fn(&amp;'r usize, &amp;'s mut std::fmt::Formatter&lt;'t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt;;<br align="left"/>let mut _78: &amp;[&amp;str; 1];<br align="left"/>let mut _79: bool;<br align="left"/>debug plaintext =&gt; _1;<br align="left"/>debug ciphertext =&gt; _5;<br align="left"/>debug key =&gt; _9;<br align="left"/>debug nonce =&gt; _18;<br align="left"/>debug computed_ciphertext =&gt; _22;<br align="left"/>debug iter =&gt; _37;<br align="left"/>debug __next =&gt; _38;<br align="left"/>debug val =&gt; _43;<br align="left"/>debug i =&gt; _45;<br align="left"/>debug x1 =&gt; _46;<br align="left"/>debug x2 =&gt; _47;<br align="left"/>debug left_val =&gt; _51;<br align="left"/>debug right_val =&gt; _52;<br align="left"/>debug kind =&gt; _57;<br align="left"/>debug arg0 =&gt; _74;<br align="left"/>>;
    bb0__0_42 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_79 = const false<br/>_4 = Box([u8; 114])<br/>(*_4) = [const 76_u8, const 97_u8, const 100_u8, const 105_u8, const 101_u8, const 115_u8, const 32_u8, const 97_u8, const 110_u8, const 100_u8, const 32_u8, const 71_u8, const 101_u8, const 110_u8, const 116_u8, const 108_u8, const 101_u8, const 109_u8, const 101_u8, const 110_u8, const 32_u8, const 111_u8, const 102_u8, const 32_u8, const 116_u8, const 104_u8, const 101_u8, const 32_u8, const 99_u8, const 108_u8, const 97_u8, const 115_u8, const 115_u8, const 32_u8, const 111_u8, const 102_u8, const 32_u8, const 39_u8, const 57_u8, const 57_u8, const 58_u8, const 32_u8, const 73_u8, const 102_u8, const 32_u8, const 73_u8, const 32_u8, const 99_u8, const 111_u8, const 117_u8, const 108_u8, const 100_u8, const 32_u8, const 111_u8, const 102_u8, const 102_u8, const 101_u8, const 114_u8, const 32_u8, const 121_u8, const 111_u8, const 117_u8, const 32_u8, const 111_u8, const 110_u8, const 108_u8, const 121_u8, const 32_u8, const 111_u8, const 110_u8, const 101_u8, const 32_u8, const 116_u8, const 105_u8, const 112_u8, const 32_u8, const 102_u8, const 111_u8, const 114_u8, const 32_u8, const 116_u8, const 104_u8, const 101_u8, const 32_u8, const 102_u8, const 117_u8, const 116_u8, const 117_u8, const 114_u8, const 101_u8, const 44_u8, const 32_u8, const 115_u8, const 117_u8, const 110_u8, const 115_u8, const 99_u8, const 114_u8, const 101_u8, const 101_u8, const 110_u8, const 32_u8, const 119_u8, const 111_u8, const 117_u8, const 108_u8, const 100_u8, const 32_u8, const 98_u8, const 101_u8, const 32_u8, const 105_u8, const 116_u8, const 46_u8]<br/>_3 = move _4<br/>_2 = move _3 as std::boxed::Box&lt;[u8]&gt; (Pointer(Unsize))<br/></td></tr><tr><td align="left">_1 = std::slice::&lt;impl [u8]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _2)</td></tr></table>>];
    bb1__0_42 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_8 = Box([u8; 114])<br/>(*_8) = [const 110_u8, const 46_u8, const 53_u8, const 154_u8, const 37_u8, const 104_u8, const 249_u8, const 128_u8, const 65_u8, const 186_u8, const 7_u8, const 40_u8, const 221_u8, const 13_u8, const 105_u8, const 129_u8, const 233_u8, const 126_u8, const 122_u8, const 236_u8, const 29_u8, const 67_u8, const 96_u8, const 194_u8, const 10_u8, const 39_u8, const 175_u8, const 204_u8, const 253_u8, const 159_u8, const 174_u8, const 11_u8, const 249_u8, const 27_u8, const 101_u8, const 197_u8, const 82_u8, const 71_u8, const 51_u8, const 171_u8, const 143_u8, const 89_u8, const 61_u8, const 171_u8, const 205_u8, const 98_u8, const 179_u8, const 87_u8, const 22_u8, const 57_u8, const 214_u8, const 36_u8, const 230_u8, const 81_u8, const 82_u8, const 171_u8, const 143_u8, const 83_u8, const 12_u8, const 53_u8, const 159_u8, const 8_u8, const 97_u8, const 216_u8, const 7_u8, const 202_u8, const 13_u8, const 191_u8, const 80_u8, const 13_u8, const 106_u8, const 97_u8, const 86_u8, const 163_u8, const 142_u8, const 8_u8, const 138_u8, const 34_u8, const 182_u8, const 94_u8, const 82_u8, const 188_u8, const 81_u8, const 77_u8, const 22_u8, const 204_u8, const 248_u8, const 6_u8, const 129_u8, const 140_u8, const 233_u8, const 26_u8, const 183_u8, const 121_u8, const 55_u8, const 54_u8, const 90_u8, const 249_u8, const 11_u8, const 191_u8, const 116_u8, const 163_u8, const 91_u8, const 230_u8, const 180_u8, const 11_u8, const 142_u8, const 237_u8, const 242_u8, const 120_u8, const 94_u8, const 66_u8, const 135_u8, const 77_u8]<br/>_7 = move _8<br/>_6 = move _7 as std::boxed::Box&lt;[u8]&gt; (Pointer(Unsize))<br/></td></tr><tr><td align="left">_5 = std::slice::&lt;impl [u8]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _6)</td></tr></table>>];
    bb2__0_42 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_17 = Box([u8; 32])<br/>(*_17) = [const 0_u8, const 1_u8, const 2_u8, const 3_u8, const 4_u8, const 5_u8, const 6_u8, const 7_u8, const 8_u8, const 9_u8, const 10_u8, const 11_u8, const 12_u8, const 13_u8, const 14_u8, const 15_u8, const 16_u8, const 17_u8, const 18_u8, const 19_u8, const 20_u8, const 21_u8, const 22_u8, const 23_u8, const 24_u8, const 25_u8, const 26_u8, const 27_u8, const 28_u8, const 29_u8, const 30_u8, const 31_u8]<br/>_16 = move _17<br/>_15 = move _16 as std::boxed::Box&lt;[u8]&gt; (Pointer(Unsize))<br/></td></tr><tr><td align="left">_14 = std::slice::&lt;impl [u8]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _15)</td></tr></table>>];
    bb3__0_42 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_13 = &amp;_14<br/>_12 = _13<br/></td></tr><tr><td align="left">_11 = &lt;std::vec::Vec&lt;u8&gt; as std::ops::Deref&gt;::deref(move _12)</td></tr></table>>];
    bb4__0_42 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_10 = _11<br/></td></tr><tr><td align="left">_9 = classify_u8s(move _10)</td></tr></table>>];
    bb5__0_42 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">drop(_14)</td></tr></table>>];
    bb6__0_42 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">_21 = Box([u8; 12])<br/>(*_21) = [const 0_u8, const 0_u8, const 0_u8, const 0_u8, const 0_u8, const 0_u8, const 0_u8, const 74_u8, const 0_u8, const 0_u8, const 0_u8, const 0_u8]<br/>_20 = move _21<br/>_19 = move _20 as std::boxed::Box&lt;[u8]&gt; (Pointer(Unsize))<br/></td></tr><tr><td align="left">_18 = std::slice::&lt;impl [u8]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _19)</td></tr></table>>];
    bb7__0_42 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_24 = &amp;_9<br/>_23 = _24<br/>_26 = &amp;_18<br/>_25 = _26<br/>_28 = &amp;_1<br/>_27 = _28<br/></td></tr><tr><td align="left">_22 = chacha20_encrypt(move _23, const 1_u32, move _25, move _27)</td></tr></table>>];
    bb8__0_42 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">_79 = const true<br/>_35 = &amp;_5<br/></td></tr><tr><td align="left">_34 = &lt;std::vec::Vec&lt;u8&gt; as std::ops::Deref&gt;::deref(move _35)</td></tr></table>>];
    bb9__0_42 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">_33 = _34<br/></td></tr><tr><td align="left">_32 = core::slice::&lt;impl [u8]&gt;::iter(move _33)</td></tr></table>>];
    bb10__0_42 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">_79 = const false<br/>_36 = move _22<br/></td></tr><tr><td align="left">_31 = &lt;std::slice::Iter&lt;u8&gt; as std::iter::Iterator&gt;::zip::&lt;std::vec::Vec&lt;u8&gt;&gt;(move _32, move _36)</td></tr></table>>];
    bb11__0_42 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left">_30 = &lt;std::iter::Zip&lt;std::slice::Iter&lt;u8&gt;, std::vec::IntoIter&lt;u8&gt;&gt; as std::iter::Iterator&gt;::enumerate(move _31)</td></tr></table>>];
    bb12__0_42 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left">_29 = &lt;std::iter::Enumerate&lt;std::iter::Zip&lt;std::slice::Iter&lt;u8&gt;, std::vec::IntoIter&lt;u8&gt;&gt;&gt; as std::iter::IntoIterator&gt;::into_iter(move _30)</td></tr></table>>];
    bb13__0_42 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">_37 = move _29<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_42 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">_41 = &amp;mut _37<br/>_40 = &amp;mut (*_41)<br/></td></tr><tr><td align="left">_39 = &lt;std::iter::Enumerate&lt;std::iter::Zip&lt;std::slice::Iter&lt;u8&gt;, std::vec::IntoIter&lt;u8&gt;&gt;&gt; as std::iter::Iterator&gt;::next(move _40)</td></tr></table>>];
    bb15__0_42 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">_42 = discriminant(_39)<br/></td></tr><tr><td align="left">switchInt(move _42)</td></tr></table>>];
    bb16__0_42 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">_0 = const ()<br/></td></tr><tr><td align="left">drop(_37)</td></tr></table>>];
    bb17__0_42 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb18__0_42 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">_43 = ((_39 as Some).0: (usize, (&amp;u8, u8)))<br/>_44 = _43<br/>_38 = move _44<br/>_46 = ((_38.1: (&amp;u8, u8)).0: &amp;u8)<br/>_47 = ((_38.1: (&amp;u8, u8)).1: u8)<br/>_45 = (_38.0: usize)<br/>_49 = _46<br/>_50 = &amp;_47<br/>(_48.0: &amp;u8) = move _49<br/>(_48.1: &amp;u8) = move _50<br/>_51 = (_48.0: &amp;u8)<br/>_52 = (_48.1: &amp;u8)<br/>_55 = (*_51)<br/>_56 = (*_52)<br/>_54 = Eq(move _55, move _56)<br/>_53 = Not(move _54)<br/></td></tr><tr><td align="left">switchInt(move _53)</td></tr></table>>];
    bb19__0_42 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">discriminant(_57) = 0<br/>_58 = const core::panicking::AssertKind::Eq<br/>_60 = _51<br/>_59 = _60<br/>_62 = _52<br/>_61 = _62<br/>_78 = const main::promoted[0]<br/>_67 = _78<br/>_66 = _67<br/>_65 = move _66 as &amp;[&amp;str] (Pointer(Unsize))<br/>_73 = &amp;_45<br/>(_72.0: &amp;usize) = move _73<br/>_74 = (_72.0: &amp;usize)<br/>_76 = _74<br/>_77 = &lt;usize as std::fmt::Debug&gt;::fmt as for&lt;'r, 's, 't0&gt; fn(&amp;'r usize, &amp;'s mut std::fmt::Formatter&lt;'t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))<br/></td></tr><tr><td align="left">_75 = std::fmt::ArgumentV1::new::&lt;usize&gt;(move _76, move _77)</td></tr></table>>];
    bb20__0_42 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left">goto</td></tr></table>>];
    bb21__0_42 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">_71 = [move _75]<br/>_70 = &amp;_71<br/>_69 = _70<br/>_68 = move _69 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))<br/></td></tr><tr><td align="left">_64 = std::fmt::Arguments::new_v1(move _65, move _68)</td></tr></table>>];
    bb22__0_42 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">((_63 as Some).0: std::fmt::Arguments) = move _64<br/>discriminant(_63) = 1<br/></td></tr><tr><td align="left">core::panicking::assert_failed::&lt;u8, u8&gt;(move _58, move _59, move _61, move _63)</td></tr></table>>];
    bb23__0_42 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">_79 = const false<br/></td></tr><tr><td align="left">drop(_18)</td></tr></table>>];
    bb24__0_42 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left">drop(_9)</td></tr></table>>];
    bb25__0_42 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left">drop(_5)</td></tr></table>>];
    bb26__0_42 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left">drop(_1)</td></tr></table>>];
    bb27__0_42 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left">return</td></tr></table>>];
    bb28__0_42 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">28 (cleanup)</td></tr><tr><td align="left">drop(_37)</td></tr></table>>];
    bb29__0_42 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">29 (cleanup)</td></tr><tr><td align="left">drop(_18)</td></tr></table>>];
    bb30__0_42 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">30 (cleanup)</td></tr><tr><td align="left">drop(_9)</td></tr></table>>];
    bb31__0_42 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">31 (cleanup)</td></tr><tr><td align="left">drop(_14)</td></tr></table>>];
    bb32__0_42 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">32 (cleanup)</td></tr><tr><td align="left">drop(_5)</td></tr></table>>];
    bb33__0_42 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">33 (cleanup)</td></tr><tr><td align="left">drop(_1)</td></tr></table>>];
    bb34__0_42 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">34 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb35__0_42 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">35 (cleanup)</td></tr><tr><td align="left">drop(_22)</td></tr></table>>];
    bb36__0_42 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">36 (cleanup)</td></tr><tr><td align="left">switchInt(_79)</td></tr></table>>];
    bb0__0_42 -> bb1__0_42 [label="return"];
    bb1__0_42 -> bb2__0_42 [label="return"];
    bb1__0_42 -> bb33__0_42 [label="unwind"];
    bb2__0_42 -> bb3__0_42 [label="return"];
    bb2__0_42 -> bb32__0_42 [label="unwind"];
    bb3__0_42 -> bb4__0_42 [label="return"];
    bb3__0_42 -> bb31__0_42 [label="unwind"];
    bb4__0_42 -> bb5__0_42 [label="return"];
    bb4__0_42 -> bb31__0_42 [label="unwind"];
    bb5__0_42 -> bb6__0_42 [label="return"];
    bb5__0_42 -> bb30__0_42 [label="unwind"];
    bb6__0_42 -> bb7__0_42 [label="return"];
    bb6__0_42 -> bb30__0_42 [label="unwind"];
    bb7__0_42 -> bb8__0_42 [label="return"];
    bb7__0_42 -> bb29__0_42 [label="unwind"];
    bb8__0_42 -> bb9__0_42 [label="return"];
    bb8__0_42 -> bb36__0_42 [label="unwind"];
    bb9__0_42 -> bb10__0_42 [label="return"];
    bb9__0_42 -> bb36__0_42 [label="unwind"];
    bb10__0_42 -> bb11__0_42 [label="return"];
    bb10__0_42 -> bb36__0_42 [label="unwind"];
    bb11__0_42 -> bb12__0_42 [label="return"];
    bb11__0_42 -> bb36__0_42 [label="unwind"];
    bb12__0_42 -> bb13__0_42 [label="return"];
    bb12__0_42 -> bb36__0_42 [label="unwind"];
    bb13__0_42 -> bb14__0_42 [label=""];
    bb14__0_42 -> bb15__0_42 [label="return"];
    bb14__0_42 -> bb28__0_42 [label="unwind"];
    bb15__0_42 -> bb16__0_42 [label="0_isize"];
    bb15__0_42 -> bb18__0_42 [label="1_isize"];
    bb15__0_42 -> bb17__0_42 [label="otherwise"];
    bb16__0_42 -> bb23__0_42 [label="return"];
    bb16__0_42 -> bb36__0_42 [label="unwind"];
    bb18__0_42 -> bb20__0_42 [label="false"];
    bb18__0_42 -> bb19__0_42 [label="otherwise"];
    bb19__0_42 -> bb21__0_42 [label="return"];
    bb19__0_42 -> bb28__0_42 [label="unwind"];
    bb20__0_42 -> bb14__0_42 [label=""];
    bb21__0_42 -> bb22__0_42 [label="return"];
    bb21__0_42 -> bb28__0_42 [label="unwind"];
    bb22__0_42 -> bb28__0_42 [label="unwind"];
    bb23__0_42 -> bb24__0_42 [label="return"];
    bb23__0_42 -> bb30__0_42 [label="unwind"];
    bb24__0_42 -> bb25__0_42 [label="return"];
    bb24__0_42 -> bb32__0_42 [label="unwind"];
    bb25__0_42 -> bb26__0_42 [label="return"];
    bb25__0_42 -> bb33__0_42 [label="unwind"];
    bb26__0_42 -> bb27__0_42 [label="return"];
    bb28__0_42 -> bb36__0_42 [label="return"];
    bb29__0_42 -> bb30__0_42 [label="return"];
    bb30__0_42 -> bb32__0_42 [label="return"];
    bb31__0_42 -> bb32__0_42 [label="return"];
    bb32__0_42 -> bb33__0_42 [label="return"];
    bb33__0_42 -> bb34__0_42 [label="return"];
    bb35__0_42 -> bb29__0_42 [label="return"];
    bb36__0_42 -> bb29__0_42 [label="false"];
    bb36__0_42 -> bb35__0_42 [label="otherwise"];
}
subgraph cluster_Mir_0_39 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn chacha20_counter_mode::{closure#1}(_1: &amp;mut [closure@chacha20/src/main.rs:115:14: 115:36], _2: &amp;[secret_integers::U8; 64]) -&gt; std::vec::Vec&lt;secret_integers::U8&gt;<br align="left"/>let mut _3: &amp;[secret_integers::U8];<br align="left"/>let mut _4: &amp;[secret_integers::U8; 64];<br align="left"/>debug block =&gt; _2;<br align="left"/>>;
    bb0__0_39 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_4 = _2<br/>_3 = move _4 as &amp;[secret_integers::U8] (Pointer(Unsize))<br/></td></tr><tr><td align="left">_0 = std::slice::&lt;impl [secret_integers::U8]&gt;::to_vec(move _3)</td></tr></table>>];
    bb1__0_39 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_39 -> bb1__0_39 [label="return"];
}
subgraph cluster_Mir_0_36 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn chacha20_counter_mode::{closure#0}(_1: &amp;mut [closure@chacha20/src/main.rs:96:14: 100:10], _2: &amp;[secret_integers::U8]) -&gt; [secret_integers::U8; 64]<br align="left"/>let mut _3: secret_integers::U8;<br align="left"/>let _4: ();<br align="left"/>let mut _5: &amp;mut [secret_integers::U8];<br align="left"/>let mut _6: &amp;mut [secret_integers::U8];<br align="left"/>let mut _7: &amp;mut [secret_integers::U8; 64];<br align="left"/>let mut _8: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _9: usize;<br align="left"/>let mut _10: &amp;[secret_integers::U8];<br align="left"/>let mut _11: &amp;[secret_integers::U8];<br align="left"/>debug block =&gt; _2;<br align="left"/>debug new_block =&gt; _0;<br align="left"/>>;
    bb0__0_36 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left">_3 = secret_integers::U8::zero()</td></tr></table>>];
    bb1__0_36 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_0 = [move _3; BLOCK_SIZE]<br/>_7 = &amp;mut _0<br/>_10 = _2<br/></td></tr><tr><td align="left">_9 = core::slice::&lt;impl [secret_integers::U8]&gt;::len(move _10)</td></tr></table>>];
    bb2__0_36 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">(_8.0: usize) = const 0_usize<br/>(_8.1: usize) = move _9<br/></td></tr><tr><td align="left">_6 = &lt;[secret_integers::U8; 64] as std::ops::IndexMut&lt;std::ops::Range&lt;usize&gt;&gt;&gt;::index_mut(move _7, move _8)</td></tr></table>>];
    bb3__0_36 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_5 = &amp;mut (*_6)<br/>_11 = _2<br/></td></tr><tr><td align="left">_4 = core::slice::&lt;impl [secret_integers::U8]&gt;::copy_from_slice(move _5, move _11)</td></tr></table>>];
    bb4__0_36 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_36 -> bb1__0_36 [label="return"];
    bb1__0_36 -> bb2__0_36 [label="return"];
    bb2__0_36 -> bb3__0_36 [label="return"];
    bb3__0_36 -> bb4__0_36 [label="return"];
}
subgraph cluster_Mir_0_33 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn xor_block::{constant#1}() -&gt; usize<br align="left"/>>;
    bb0__0_33 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_0 = const BLOCK_SIZE<br/></td></tr><tr><td align="left">return</td></tr></table>>];
}
subgraph cluster_Mir_0_30 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn chacha20_block::{constant#0}() -&gt; usize<br align="left"/>>;
    bb0__0_30 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_0 = const BLOCK_SIZE<br/></td></tr><tr><td align="left">return</td></tr></table>>];
}
subgraph cluster_Mir_0_27 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn chacha20_core(_1: &amp;mut [secret_integers::U32; 16]) -&gt; ()<br align="left"/>let mut _2: [secret_integers::U32; 16];<br align="left"/>let mut _3: &amp;[secret_integers::U32; 16];<br align="left"/>let mut _4: std::ops::Range&lt;i32&gt;;<br align="left"/>let mut _5: std::ops::Range&lt;i32&gt;;<br align="left"/>let mut _6: std::ops::Range&lt;i32&gt;;<br align="left"/>let mut _7: i32;<br align="left"/>let mut _8: std::option::Option&lt;i32&gt;;<br align="left"/>let mut _9: &amp;mut std::ops::Range&lt;i32&gt;;<br align="left"/>let mut _10: &amp;mut std::ops::Range&lt;i32&gt;;<br align="left"/>let mut _11: isize;<br align="left"/>let _12: i32;<br align="left"/>let mut _13: i32;<br align="left"/>let _14: ();<br align="left"/>let mut _15: &amp;mut [secret_integers::U32; 16];<br align="left"/>let mut _16: &amp;mut [secret_integers::U32; 16];<br align="left"/>let mut _17: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _18: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _19: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _20: usize;<br align="left"/>let mut _21: std::option::Option&lt;usize&gt;;<br align="left"/>let mut _22: &amp;mut std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _23: &amp;mut std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _24: isize;<br align="left"/>let _25: usize;<br align="left"/>let mut _26: usize;<br align="left"/>let _27: usize;<br align="left"/>let _28: ();<br align="left"/>let mut _29: &amp;mut secret_integers::U32;<br align="left"/>let _30: usize;<br align="left"/>let mut _31: usize;<br align="left"/>let mut _32: bool;<br align="left"/>let mut _33: secret_integers::U32;<br align="left"/>let _34: usize;<br align="left"/>let mut _35: usize;<br align="left"/>let mut _36: bool;<br align="left"/>debug st =&gt; _1;<br align="left"/>debug working_state =&gt; _2;<br align="left"/>debug iter =&gt; _6;<br align="left"/>debug __next =&gt; _7;<br align="left"/>debug val =&gt; _12;<br align="left"/>debug iter =&gt; _19;<br align="left"/>debug __next =&gt; _20;<br align="left"/>debug val =&gt; _25;<br align="left"/>debug i =&gt; _27;<br align="left"/>>;
    bb0__0_27 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_3 = &amp;(*_1)<br/></td></tr><tr><td align="left">_2 = &lt;[secret_integers::U32; 16] as std::clone::Clone&gt;::clone(move _3)</td></tr></table>>];
    bb1__0_27 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">(_5.0: i32) = const 0_i32<br/>(_5.1: i32) = const 10_i32<br/></td></tr><tr><td align="left">_4 = &lt;std::ops::Range&lt;i32&gt; as std::iter::IntoIterator&gt;::into_iter(move _5)</td></tr></table>>];
    bb2__0_27 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_6 = move _4<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb3__0_27 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_10 = &amp;mut _6<br/>_9 = &amp;mut (*_10)<br/></td></tr><tr><td align="left">_8 = &lt;std::ops::Range&lt;i32&gt; as std::iter::Iterator&gt;::next(move _9)</td></tr></table>>];
    bb4__0_27 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_11 = discriminant(_8)<br/></td></tr><tr><td align="left">switchInt(move _11)</td></tr></table>>];
    bb5__0_27 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">(_18.0: usize) = const 0_usize<br/>(_18.1: usize) = const 16_usize<br/></td></tr><tr><td align="left">_17 = &lt;std::ops::Range&lt;usize&gt; as std::iter::IntoIterator&gt;::into_iter(move _18)</td></tr></table>>];
    bb6__0_27 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb7__0_27 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_12 = ((_8 as Some).0: i32)<br/>_13 = _12<br/>_7 = move _13<br/>_16 = &amp;mut _2<br/>_15 = &amp;mut (*_16)<br/></td></tr><tr><td align="left">_14 = double_round(move _15)</td></tr></table>>];
    bb8__0_27 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_27 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">_19 = move _17<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_27 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">_23 = &amp;mut _19<br/>_22 = &amp;mut (*_23)<br/></td></tr><tr><td align="left">_21 = &lt;std::ops::Range&lt;usize&gt; as std::iter::Iterator&gt;::next(move _22)</td></tr></table>>];
    bb11__0_27 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">_24 = discriminant(_21)<br/></td></tr><tr><td align="left">switchInt(move _24)</td></tr></table>>];
    bb12__0_27 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">_0 = const ()<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb13__0_27 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb14__0_27 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">_25 = ((_21 as Some).0: usize)<br/>_26 = _25<br/>_20 = move _26<br/>_27 = _20<br/>_30 = _27<br/>_31 = const 16_usize<br/>_32 = Lt(_30, _31)<br/></td></tr><tr><td align="left">assert(move _32, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _31, _30)</td></tr></table>>];
    bb15__0_27 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">_29 = &amp;mut (*_1)[_30]<br/>_34 = _27<br/>_35 = const 16_usize<br/>_36 = Lt(_34, _35)<br/></td></tr><tr><td align="left">assert(move _36, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _35, _34)</td></tr></table>>];
    bb16__0_27 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">_33 = _2[_34]<br/></td></tr><tr><td align="left">_28 = &lt;secret_integers::U32 as std::ops::AddAssign&gt;::add_assign(move _29, move _33)</td></tr></table>>];
    bb17__0_27 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_27 -> bb1__0_27 [label="return"];
    bb1__0_27 -> bb2__0_27 [label="return"];
    bb2__0_27 -> bb3__0_27 [label=""];
    bb3__0_27 -> bb4__0_27 [label="return"];
    bb4__0_27 -> bb5__0_27 [label="0_isize"];
    bb4__0_27 -> bb7__0_27 [label="1_isize"];
    bb4__0_27 -> bb6__0_27 [label="otherwise"];
    bb5__0_27 -> bb9__0_27 [label="return"];
    bb7__0_27 -> bb8__0_27 [label="return"];
    bb8__0_27 -> bb3__0_27 [label=""];
    bb9__0_27 -> bb10__0_27 [label=""];
    bb10__0_27 -> bb11__0_27 [label="return"];
    bb11__0_27 -> bb12__0_27 [label="0_isize"];
    bb11__0_27 -> bb14__0_27 [label="1_isize"];
    bb11__0_27 -> bb13__0_27 [label="otherwise"];
    bb14__0_27 -> bb15__0_27 [label=""];
    bb15__0_27 -> bb16__0_27 [label=""];
    bb16__0_27 -> bb17__0_27 [label="return"];
    bb17__0_27 -> bb10__0_27 [label=""];
}
subgraph cluster_Mir_0_24 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn CONSTANTS() -&gt; [u32; 4]<br align="left"/>>;
    bb0__0_24 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_0 = [const 1634760805_u32, const 857760878_u32, const 2036477234_u32, const 1797285236_u32]<br/></td></tr><tr><td align="left">return</td></tr></table>>];
}
subgraph cluster_Mir_0_21 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn line(_1: usize, _2: usize, _3: usize, _4: u32, _5: &amp;mut [secret_integers::U32; 16]) -&gt; ()<br align="left"/>let mut _6: secret_integers::U32;<br align="left"/>let mut _7: secret_integers::U32;<br align="left"/>let _8: usize;<br align="left"/>let mut _9: usize;<br align="left"/>let mut _10: bool;<br align="left"/>let mut _11: secret_integers::U32;<br align="left"/>let _12: usize;<br align="left"/>let mut _13: usize;<br align="left"/>let mut _14: bool;<br align="left"/>let _15: usize;<br align="left"/>let mut _16: usize;<br align="left"/>let mut _17: bool;<br align="left"/>let mut _18: secret_integers::U32;<br align="left"/>let mut _19: secret_integers::U32;<br align="left"/>let _20: usize;<br align="left"/>let mut _21: usize;<br align="left"/>let mut _22: bool;<br align="left"/>let mut _23: secret_integers::U32;<br align="left"/>let _24: usize;<br align="left"/>let mut _25: usize;<br align="left"/>let mut _26: bool;<br align="left"/>let _27: usize;<br align="left"/>let mut _28: usize;<br align="left"/>let mut _29: bool;<br align="left"/>let mut _30: secret_integers::U32;<br align="left"/>let mut _31: secret_integers::U32;<br align="left"/>let _32: usize;<br align="left"/>let mut _33: usize;<br align="left"/>let mut _34: bool;<br align="left"/>let mut _35: u32;<br align="left"/>let _36: usize;<br align="left"/>let mut _37: usize;<br align="left"/>let mut _38: bool;<br align="left"/>debug a =&gt; _1;<br align="left"/>debug b =&gt; _2;<br align="left"/>debug d =&gt; _3;<br align="left"/>debug s =&gt; _4;<br align="left"/>debug m =&gt; _5;<br align="left"/>>;
    bb0__0_21 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_8 = _1<br/>_9 = const 16_usize<br/>_10 = Lt(_8, _9)<br/></td></tr><tr><td align="left">assert(move _10, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _9, _8)</td></tr></table>>];
    bb1__0_21 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_7 = (*_5)[_8]<br/>_12 = _2<br/>_13 = const 16_usize<br/>_14 = Lt(_12, _13)<br/></td></tr><tr><td align="left">assert(move _14, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _13, _12)</td></tr></table>>];
    bb2__0_21 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_11 = (*_5)[_12]<br/></td></tr><tr><td align="left">_6 = &lt;secret_integers::U32 as std::ops::Add&gt;::add(move _7, move _11)</td></tr></table>>];
    bb3__0_21 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_15 = _1<br/>_16 = const 16_usize<br/>_17 = Lt(_15, _16)<br/></td></tr><tr><td align="left">assert(move _17, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _16, _15)</td></tr></table>>];
    bb4__0_21 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">(*_5)[_15] = move _6<br/>_20 = _3<br/>_21 = const 16_usize<br/>_22 = Lt(_20, _21)<br/></td></tr><tr><td align="left">assert(move _22, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _21, _20)</td></tr></table>>];
    bb5__0_21 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">_19 = (*_5)[_20]<br/>_24 = _1<br/>_25 = const 16_usize<br/>_26 = Lt(_24, _25)<br/></td></tr><tr><td align="left">assert(move _26, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _25, _24)</td></tr></table>>];
    bb6__0_21 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">_23 = (*_5)[_24]<br/></td></tr><tr><td align="left">_18 = &lt;secret_integers::U32 as std::ops::BitXor&gt;::bitxor(move _19, move _23)</td></tr></table>>];
    bb7__0_21 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_27 = _3<br/>_28 = const 16_usize<br/>_29 = Lt(_27, _28)<br/></td></tr><tr><td align="left">assert(move _29, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _28, _27)</td></tr></table>>];
    bb8__0_21 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">(*_5)[_27] = move _18<br/>_32 = _3<br/>_33 = const 16_usize<br/>_34 = Lt(_32, _33)<br/></td></tr><tr><td align="left">assert(move _34, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _33, _32)</td></tr></table>>];
    bb9__0_21 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">_31 = (*_5)[_32]<br/>_35 = _4<br/></td></tr><tr><td align="left">_30 = secret_integers::U32::rotate_left(move _31, move _35)</td></tr></table>>];
    bb10__0_21 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">_36 = _3<br/>_37 = const 16_usize<br/>_38 = Lt(_36, _37)<br/></td></tr><tr><td align="left">assert(move _38, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _37, _36)</td></tr></table>>];
    bb11__0_21 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">(*_5)[_36] = move _30<br/>_0 = const ()<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_21 -> bb1__0_21 [label=""];
    bb1__0_21 -> bb2__0_21 [label=""];
    bb2__0_21 -> bb3__0_21 [label="return"];
    bb3__0_21 -> bb4__0_21 [label=""];
    bb4__0_21 -> bb5__0_21 [label=""];
    bb5__0_21 -> bb6__0_21 [label=""];
    bb6__0_21 -> bb7__0_21 [label="return"];
    bb7__0_21 -> bb8__0_21 [label=""];
    bb8__0_21 -> bb9__0_21 [label=""];
    bb9__0_21 -> bb10__0_21 [label="return"];
    bb10__0_21 -> bb11__0_21 [label=""];
}
subgraph cluster_Mir_0_18 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn classify_u8s::{closure#0}(_1: &amp;mut [closure@chacha20/src/main.rs:17:18: 17:38], _2: &amp;u8) -&gt; secret_integers::U8<br align="left"/>let mut _3: u8;<br align="left"/>debug x =&gt; _2;<br align="left"/>>;
    bb0__0_18 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_3 = (*_2)<br/></td></tr><tr><td align="left">_0 = secret_integers::U8::classify::&lt;u8&gt;(move _3)</td></tr></table>>];
    bb1__0_18 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_18 -> bb1__0_18 [label="return"];
}
subgraph cluster_Mir_0_15 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn classify_u32s(_1: &amp;[u32]) -&gt; std::vec::Vec&lt;secret_integers::U32&gt;<br align="left"/>let mut _2: std::iter::Map&lt;std::slice::Iter&lt;u32&gt;, [closure@chacha20/src/main.rs:13:18: 13:39]&gt;;<br align="left"/>let mut _3: std::slice::Iter&lt;u32&gt;;<br align="left"/>let mut _4: &amp;[u32];<br align="left"/>let mut _5: [closure@chacha20/src/main.rs:13:18: 13:39];<br align="left"/>debug v =&gt; _1;<br align="left"/>>;
    bb0__0_15 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_4 = _1<br/></td></tr><tr><td align="left">_3 = core::slice::&lt;impl [u32]&gt;::iter(move _4)</td></tr></table>>];
    bb1__0_15 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left">_2 = &lt;std::slice::Iter&lt;u32&gt; as std::iter::Iterator&gt;::map::&lt;secret_integers::U32, [closure@chacha20/src/main.rs:13:18: 13:39]&gt;(move _3, move _5)</td></tr></table>>];
    bb2__0_15 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left">_0 = &lt;std::iter::Map&lt;std::slice::Iter&lt;u32&gt;, [closure@chacha20/src/main.rs:13:18: 13:39]&gt; as std::iter::Iterator&gt;::collect::&lt;std::vec::Vec&lt;secret_integers::U32&gt;&gt;(move _2)</td></tr></table>>];
    bb3__0_15 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_15 -> bb1__0_15 [label="return"];
    bb1__0_15 -> bb2__0_15 [label="return"];
    bb2__0_15 -> bb3__0_15 [label="return"];
}
subgraph cluster_Mir_0_12 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn Constants::{constant#0}() -&gt; usize<br align="left"/>>;
    bb0__0_12 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_0 = const 4_usize<br/></td></tr><tr><td align="left">return</td></tr></table>>];
}
subgraph cluster_Mir_0_6 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn State::{constant#0}() -&gt; usize<br align="left"/>>;
    bb0__0_6 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_0 = const 16_usize<br/></td></tr><tr><td align="left">return</td></tr></table>>];
}
}
