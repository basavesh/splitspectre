#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2018::*; /* 4 */
#[macro_use]
extern crate std; /* 9 */
use secret_integers::*; /* 10 */

const BLOCK_SIZE: usize = (64 /* 15 */); /* 12 */
type State = [U32; (16 /* 21 */)]; /* 16 */
type Key = Vec<U8>; /* 22 */
type Nonce = Vec<U8>; /* 27 */
type Block = [U8; (64 /* 37 */)]; /* 32 */
type Constants = [u32; (4 /* 43 */)]; /* 38 */
type Index = usize; /* 44 */
type RotVal = u32; /* 47 */

fn f() -> i32 {
    let x /* pat 55 */ = (1 /* 56 */);

    macro_rules! first_x { () => { x } }
    /*
    57
    */
    let x /* pat 59 */ = (2 /* 60 */);

    ((x /* 62 */) + (x /* 1064 */) /* 63 */)
} /* block 53 */ /* 50 */

fn dummy_generic<A, B>(x /* pat 66 */: A, y /* pat 70 */: B) {


















    ({
         ((::std::io::_print /* 1069
              */)(((::core::fmt::Arguments::new_v1 /* 1076
                       */)((&([("I\'m not doing anything with these arguments\n"
                                   /* 1077 */)] /* 1078 */) /* 1079 */),
                           (&(match (() /* 1080 */) {
                                  () /* pat 1082 */ => ([] /* 1083 */),
                              } /* 1084 */) /* 1085 */)) /* 1086 */)) /* 1070
             */);
     } /* block 1065 */ /* 1071 */);
} /* block 75 */ /* 64 */
pub fn classify_u32s(v /* pat 78 */: &[u32]) -> Vec<U32> {
    ((((v /* 92 */).iter() /* 93
          */).map((|x /* pat 95 */|
                      ((U32::classify /* 99 */)((*(x /* 101 */) /* 102 */)) /*
                          103 */) /* 104 */)) /* 105 */).collect() /* 106 */)
} /* block 87 */ /* 76 */
pub fn classify_u8s(v /* pat 109 */: &[u8]) -> Vec<U8> {
    ((((v /* 123 */).iter() /* 124
          */).map((|x /* pat 126 */|
                      ((U8::classify /* 130 */)((*(x /* 132 */) /* 133 */)) /*
                          134 */) /* 135 */)) /* 136 */).collect() /* 137 */)
} /* block 118 */ /* 107 */
pub fn declassify_u8s(v /* pat 140 */: &[U8]) -> Vec<u8> {
    ((((v /* 154 */).iter() /* 155
          */).map((|x /* pat 157 */|
                      ((U8::declassify /* 161 */)((*(x /* 163 */) /* 164 */))
                          /* 165 */) /* 166 */)) /* 167 */).collect() /* 168
        */)
} /* block 149 */ /* 138 */
fn line(a /* pat 171 */: Index, b /* pat 175 */: Index,
        d /* pat 179 */: Index, s /* pat 183 */: RotVal,
        m /* pat 187 */: &mut State) {
    (((m /* 193 */)[(a /* 195 */)] /* 196 */) =
        (((m /* 198 */)[(a /* 200 */)] /* 201 */) +
            ((m /* 203 */)[(b /* 205 */)] /* 206 */) /* 207 */) /* 208 */);
    (((m /* 210 */)[(d /* 212 */)] /* 213 */) =
        (((m /* 215 */)[(d /* 217 */)] /* 218 */) ^
            ((m /* 220 */)[(a /* 222 */)] /* 223 */) /* 224 */) /* 225 */);
    (((m /* 227 */)[(d /* 229 */)] /* 230 */) =
        (((m /* 233 */)[(d /* 235 */)] /* 236 */).rotate_left((s /* 238 */))
            /* 239 */) /* 240 */);
} /* block 191 */ /* 169 */
fn quarter_round(a /* pat 243 */: Index, b /* pat 247 */: Index,
                 c /* pat 251 */: Index, d /* pat 255 */: Index,
                 m /* pat 259 */: &mut State) {
    ((line /* 265
         */)((a /* 267 */), (b /* 269 */), (d /* 271 */), (16 /* 272 */),
             (m /* 274 */)) /* 275 */);
    ((line /* 277
         */)((c /* 279 */), (d /* 281 */), (b /* 283 */), (12 /* 284 */),
             (m /* 286 */)) /* 287 */);
    ((line /* 289
         */)((a /* 291 */), (b /* 293 */), (d /* 295 */), (8 /* 296 */),
             (m /* 298 */)) /* 299 */);
    ((line /* 301
         */)((c /* 303 */), (d /* 305 */), (b /* 307 */), (7 /* 308 */),
             (m /* 310 */)) /* 311 */);
} /* block 263 */ /* 241 */
fn double_round(m /* pat 314 */: &mut State) {
    ((quarter_round /* 320
         */)((0 /* 321 */), (4 /* 322 */), (8 /* 323 */), (12 /* 324 */),
             (m /* 326 */)) /* 327 */);
    ((quarter_round /* 329
         */)((1 /* 330 */), (5 /* 331 */), (9 /* 332 */), (13 /* 333 */),
             (m /* 335 */)) /* 336 */);
    ((quarter_round /* 338
         */)((2 /* 339 */), (6 /* 340 */), (10 /* 341 */), (14 /* 342 */),
             (m /* 344 */)) /* 345 */);
    ((quarter_round /* 347
         */)((3 /* 348 */), (7 /* 349 */), (11 /* 350 */), (15 /* 351 */),
             (m /* 353 */)) /* 354 */);
    ((quarter_round /* 356
         */)((0 /* 357 */), (5 /* 358 */), (10 /* 359 */), (15 /* 360 */),
             (m /* 362 */)) /* 363 */);
    ((quarter_round /* 365
         */)((1 /* 366 */), (6 /* 367 */), (11 /* 368 */), (12 /* 369 */),
             (m /* 371 */)) /* 372 */);
    ((quarter_round /* 374
         */)((2 /* 375 */), (7 /* 376 */), (8 /* 377 */), (13 /* 378 */),
             (m /* 380 */)) /* 381 */);
    ((quarter_round /* 383
         */)((3 /* 384 */), (4 /* 385 */), (9 /* 386 */), (14 /* 387 */),
             (m /* 389 */)) /* 390 */);
} /* block 318 */ /* 312 */
const CONSTANTS: Constants =
    ([(0x61707865 /* 394 */), (0x3320646e /* 395 */), (0x79622d32 /* 396 */),
      (0x6b206574 /* 397 */)] /* 398 */); /* 391 */
fn chacha20_init(k /* pat 401 */: &Key, counter /* pat 406 */: U32,
                 nonce /* pat 410 */: &Nonce) -> State {
    let mut st /* pat 418 */ =
        ([((U32::classify /* 421 */)((0u32 /* 422 */)) /* 423 */);
             (16 /* 425 */)] /* 426 */);
    (((st /* 429 */)[((0 /* 430 */)..(4 /* 431 */) /* 432 */)] /* 433
         */).copy_from_slice((&((classify_u32s /* 435
                                    */)((&(CONSTANTS /* 437 */) /* 438 */)) /*
                                   439 */) /* 440 */)) /* 441 */);
    (((st /* 444 */)[((4 /* 445 */)..(12 /* 446 */) /* 447 */)] /* 448
         */).copy_from_slice((((U32::from_bytes_le /* 452 */)((k /* 454 */))
                                  /* 455 */).as_slice() /* 456 */)) /* 457
        */);
    (((st /* 459 */)[(12 /* 460 */)] /* 461 */) = (counter /* 463 */) /* 464
        */);
    (((st /* 467 */)[((13 /* 468 */)..(16 /* 469 */) /* 470 */)] /* 471
         */).copy_from_slice((((U32::from_bytes_le /* 475
                                   */)((nonce /* 477 */)) /* 478
                                  */).as_slice() /* 479 */)) /* 480 */);
    (st /* 482 */)
} /* block 416 */ /* 399 */
fn chacha20_core(st /* pat 485 */: &mut State) {
    let mut working_state /* pat 491 */ = ((st /* 494 */).clone() /* 495 */);
    (for _ /* pat 496 */ in ((0 /* 497 */)..(10 /* 498 */) /* 499 */) {
         ((double_round /* 502 */)((&mut (working_state /* 504 */) /* 505 */))
             /* 506 */);
     } /* block 500 */ /* 507 */)
    (for i /* pat 508 */ in ((0 /* 509 */)..(16 /* 510 */) /* 511 */) {
         (((st /* 514 */)[(i /* 516 */)] /* 517 */) +=
             ((working_state /* 519 */)[(i /* 521 */)] /* 522 */) /* 523 */);
     } /* block 512 */ /* 524 */)
} /* block 489 */ /* 483 */
fn chacha20(k /* pat 527 */: &Key, counter /* pat 532 */: U32,
            nonce /* pat 536 */: &Nonce) -> State {
    let mut st /* pat 544 */ =
        ((chacha20_init /* 546
             */)((k /* 548 */), (counter /* 550 */), (nonce /* 552 */)) /* 553
            */);
    ((chacha20_core /* 555 */)((&mut (st /* 557 */) /* 558 */)) /* 559 */);
    (st /* 561 */)
} /* block 542 */ /* 525 */
fn chacha20_block(k /* pat 564 */: &Key, counter /* pat 569 */: U32,
                  nonce /* pat 573 */: &Nonce) -> Block {
    let st /* pat 581 */ =
        ((chacha20 /* 583
             */)((k /* 585 */), (counter /* 587 */), (nonce /* 589 */)) /* 590
            */);
    let mut block /* pat 592 */ =
        ([((U8::classify /* 595 */)((0u8 /* 596 */)) /* 597 */);
             (BLOCK_SIZE /* 600 */)] /* 601 */);
    ((block /* 604
         */).copy_from_slice((((U32::to_bytes_le /* 608
                                   */)((&(st /* 610 */) /* 611 */)) /* 612
                                  */).as_slice() /* 613 */)) /* 614 */);
    (block /* 616 */)
} /* block 579 */ /* 562 */
fn xor_block(block /* pat 619 */: &Block, key_block /* pat 624 */: &Block)
 -> Block {
    let mut v_out /* pat 632 */ =
        ([((Default::default /* 635 */)() /* 636 */); (BLOCK_SIZE /* 639 */)]
            /* 640 */);
    (for i /* pat 641 */ in ((0 /* 642 */)..(BLOCK_SIZE /* 644 */) /* 645 */)
         {
         (((v_out /* 648 */)[(i /* 650 */)] /* 651 */) =
             (((block /* 653 */)[(i /* 655 */)] /* 656 */) ^
                 ((key_block /* 658 */)[(i /* 660 */)] /* 661 */) /* 662 */)
             /* 663 */);
     } /* block 646 */ /* 664 */)
    let mut out /* pat 666 */ =
        ([((Default::default /* 669 */)() /* 670 */); (BLOCK_SIZE /* 673 */)]
            /* 674 */);
    ((out /* 677 */).copy_from_slice((&(v_out /* 679 */) /* 680 */)) /* 681
        */);
    (out /* 683 */)
} /* block 630 */ /* 617 */
fn chacha20_counter_mode(key /* pat 686 */: &Key, counter /* pat 691 */: U32,
                         nonce /* pat 695 */: &Nonce,
                         msg /* pat 700 */: &Vec<U8>) -> Vec<U8> {
    let mut blocks /* pat 712 */: Vec<[U8; (BLOCK_SIZE /* 720 */)]> =
        ((((msg /* 725 */).chunks((BLOCK_SIZE /* 727 */)) /* 728
              */).map((|block /* pat 730 */|
                          ({
                               let mut new_block /* pat 734 */ =
                                   ([((U8::zero /* 737 */)() /* 738 */);
                                        (BLOCK_SIZE /* 741 */)] /* 742 */);
                               (((new_block /* 745
                                     */)[((0 /* 746
                                              */)..((block /* 749 */).len() /*
                                                       750 */) /* 751 */)] /*
                                    752 */).copy_from_slice((block /* 754 */))
                                   /* 755 */);
                               (new_block /* 757 */)
                           } /* block 732 */ /* 758 */) /* 759 */)) /* 760
             */).collect() /* 761 */);
    let nb_blocks /* pat 763 */ = ((blocks /* 766 */).len() /* 767 */);
    let mut key_block /* pat 769 */: [U8; (BLOCK_SIZE /* 775 */)];
    let mut ctr /* pat 777 */ = (counter /* 779 */);
    (for i /* pat 780 */ in
         ((0 /* 781
              */)..(((blocks /* 784 */).len() /* 785 */) - (1 /* 786 */) /*
                       787 */) /* 788 */) {
         ((key_block /* 791 */) =
             ((chacha20_block /* 793
                  */)((key /* 795 */), (ctr /* 797 */), (nonce /* 799 */)) /*
                 800 */) /* 801 */);
         (((blocks /* 803 */)[(i /* 805 */)] /* 806 */) =
             ((xor_block /* 808
                  */)((&((blocks /* 810 */)[(i /* 812 */)] /* 813 */) /* 814
                          */), (&(key_block /* 816 */) /* 817 */)) /* 818 */)
             /* 819 */);
         ((ctr /* 821 */) += ((U32::one /* 824 */)() /* 825 */) /* 826 */);
     } /* block 789 */ /* 827 */)
    let last /* pat 829 */ =
        (&mut ((blocks /* 831
                   */)[((nb_blocks /* 833 */) - (1 /* 834 */) /* 835 */)] /*
                  836 */) /* 837 */);
    ((key_block /* 839 */) =
        ((chacha20_block /* 841
             */)((key /* 843 */), (ctr /* 845 */), (nonce /* 847 */)) /* 848
            */) /* 849 */);
    ((*(last /* 851 */) /* 852 */) =
        ((xor_block /* 854
             */)((last /* 856 */), (&(key_block /* 858 */) /* 859 */)) /* 860
            */) /* 861 */);
    ((((((blocks /* 868 */).iter() /* 869
            */).map((|block /* pat 871 */|
                        ((block /* 875 */).to_vec() /* 876 */) /* 877 */)) /*
           878 */).flatten() /* 879
          */).take(((msg /* 882 */).len() /* 883 */)) /* 884 */).collect() /*
        885 */)
} /* block 710 */ /* 684 */
pub fn chacha20_encrypt(key /* pat 888 */: &Key, counter /* pat 893 */: u32,
                        nonce /* pat 897 */: &Vec<u8>,
                        msg /* pat 904 */: &Vec<u8>) -> Vec<u8> {
    let nonce /* pat 916 */ =
        (&((classify_u8s /* 918 */)((nonce /* 920 */)) /* 921 */) /* 922 */);
    let msg /* pat 924 */ =
        (&((classify_u8s /* 926 */)((msg /* 928 */)) /* 929 */) /* 930 */);
    ((declassify_u8s /* 932
         */)((&((chacha20_counter_mode /* 934
                    */)((key /* 936 */),
                        ((counter /* 939 */).into() /* 940 */),
                        (nonce /* 942 */), (msg /* 944 */)) /* 945 */) /* 946
                 */)) /* 947 */)
} /* block 914 */ /* 886 */
pub fn chacha20_decrypt(key /* pat 950 */: &Key, counter /* pat 955 */: u32,
                        nonce /* pat 959 */: &Vec<u8>,
                        msg /* pat 966 */: &Vec<u8>) -> Vec<u8> {
    let nonce /* pat 978 */ =
        (&((classify_u8s /* 980 */)((nonce /* 982 */)) /* 983 */) /* 984 */);
    let msg /* pat 986 */ =
        (&((classify_u8s /* 988 */)((msg /* 990 */)) /* 991 */) /* 992 */);
    ((declassify_u8s /* 994
         */)((&((chacha20_counter_mode /* 996
                    */)((key /* 998 */),
                        ((counter /* 1001 */).into() /* 1002 */),
                        (nonce /* 1004 */), (msg /* 1006 */)) /* 1007 */) /*
                 1008 */)) /* 1009 */)
} /* block 976 */ /* 948 */
fn main() {
    let plaintext /* pat 1013 */ =
        ((<[_]>::into_vec /* 1090
             */)((box
                     ([(0x4c /* 1091 */), (0x61 /* 1092 */),
                       (0x64 /* 1093 */), (0x69 /* 1094 */),
                       (0x65 /* 1095 */), (0x73 /* 1096 */),
                       (0x20 /* 1097 */), (0x61 /* 1098 */),
                       (0x6e /* 1099 */), (0x64 /* 1100 */),
                       (0x20 /* 1101 */), (0x47 /* 1102 */),
                       (0x65 /* 1103 */), (0x6e /* 1104 */),
                       (0x74 /* 1105 */), (0x6c /* 1106 */),
                       (0x65 /* 1107 */), (0x6d /* 1108 */),
                       (0x65 /* 1109 */), (0x6e /* 1110 */),
                       (0x20 /* 1111 */), (0x6f /* 1112 */),
                       (0x66 /* 1113 */), (0x20 /* 1114 */),
                       (0x74 /* 1115 */), (0x68 /* 1116 */),
                       (0x65 /* 1117 */), (0x20 /* 1118 */),
                       (0x63 /* 1119 */), (0x6c /* 1120 */),
                       (0x61 /* 1121 */), (0x73 /* 1122 */),
                       (0x73 /* 1123 */), (0x20 /* 1124 */),
                       (0x6f /* 1125 */), (0x66 /* 1126 */),
                       (0x20 /* 1127 */), (0x27 /* 1128 */),
                       (0x39 /* 1129 */), (0x39 /* 1130 */),
                       (0x3a /* 1131 */), (0x20 /* 1132 */),
                       (0x49 /* 1133 */), (0x66 /* 1134 */),
                       (0x20 /* 1135 */), (0x49 /* 1136 */),
                       (0x20 /* 1137 */), (0x63 /* 1138 */),
                       (0x6f /* 1139 */), (0x75 /* 1140 */),
                       (0x6c /* 1141 */), (0x64 /* 1142 */),
                       (0x20 /* 1143 */), (0x6f /* 1144 */),
                       (0x66 /* 1145 */), (0x66 /* 1146 */),
                       (0x65 /* 1147 */), (0x72 /* 1148 */),
                       (0x20 /* 1149 */), (0x79 /* 1150 */),
                       (0x6f /* 1151 */), (0x75 /* 1152 */),
                       (0x20 /* 1153 */), (0x6f /* 1154 */),
                       (0x6e /* 1155 */), (0x6c /* 1156 */),
                       (0x79 /* 1157 */), (0x20 /* 1158 */),
                       (0x6f /* 1159 */), (0x6e /* 1160 */),
                       (0x65 /* 1161 */), (0x20 /* 1162 */),
                       (0x74 /* 1163 */), (0x69 /* 1164 */),
                       (0x70 /* 1165 */), (0x20 /* 1166 */),
                       (0x66 /* 1167 */), (0x6f /* 1168 */),
                       (0x72 /* 1169 */), (0x20 /* 1170 */),
                       (0x74 /* 1171 */), (0x68 /* 1172 */),
                       (0x65 /* 1173 */), (0x20 /* 1174 */),
                       (0x66 /* 1175 */), (0x75 /* 1176 */),
                       (0x74 /* 1177 */), (0x75 /* 1178 */),
                       (0x72 /* 1179 */), (0x65 /* 1180 */),
                       (0x2c /* 1181 */), (0x20 /* 1182 */),
                       (0x73 /* 1183 */), (0x75 /* 1184 */),
                       (0x6e /* 1185 */), (0x73 /* 1186 */),
                       (0x63 /* 1187 */), (0x72 /* 1188 */),
                       (0x65 /* 1189 */), (0x65 /* 1190 */),
                       (0x6e /* 1191 */), (0x20 /* 1192 */),
                       (0x77 /* 1193 */), (0x6f /* 1194 */),
                       (0x75 /* 1195 */), (0x6c /* 1196 */),
                       (0x64 /* 1197 */), (0x20 /* 1198 */),
                       (0x62 /* 1199 */), (0x65 /* 1200 */),
                       (0x20 /* 1201 */), (0x69 /* 1202 */),
                       (0x74 /* 1203 */), (0x2e /* 1204 */)] /* 1205 */) /*
                     1206 */)) /* 1207 */);
    let ciphertext /* pat 1015 */ =
        ((<[_]>::into_vec /* 1211
             */)((box
                     ([(0x6e /* 1212 */), (0x2e /* 1213 */),
                       (0x35 /* 1214 */), (0x9a /* 1215 */),
                       (0x25 /* 1216 */), (0x68 /* 1217 */),
                       (0xf9 /* 1218 */), (0x80 /* 1219 */),
                       (0x41 /* 1220 */), (0xba /* 1221 */),
                       (0x07 /* 1222 */), (0x28 /* 1223 */),
                       (0xdd /* 1224 */), (0x0d /* 1225 */),
                       (0x69 /* 1226 */), (0x81 /* 1227 */),
                       (0xe9 /* 1228 */), (0x7e /* 1229 */),
                       (0x7a /* 1230 */), (0xec /* 1231 */),
                       (0x1d /* 1232 */), (0x43 /* 1233 */),
                       (0x60 /* 1234 */), (0xc2 /* 1235 */),
                       (0x0a /* 1236 */), (0x27 /* 1237 */),
                       (0xaf /* 1238 */), (0xcc /* 1239 */),
                       (0xfd /* 1240 */), (0x9f /* 1241 */),
                       (0xae /* 1242 */), (0x0b /* 1243 */),
                       (0xf9 /* 1244 */), (0x1b /* 1245 */),
                       (0x65 /* 1246 */), (0xc5 /* 1247 */),
                       (0x52 /* 1248 */), (0x47 /* 1249 */),
                       (0x33 /* 1250 */), (0xab /* 1251 */),
                       (0x8f /* 1252 */), (0x59 /* 1253 */),
                       (0x3d /* 1254 */), (0xab /* 1255 */),
                       (0xcd /* 1256 */), (0x62 /* 1257 */),
                       (0xb3 /* 1258 */), (0x57 /* 1259 */),
                       (0x16 /* 1260 */), (0x39 /* 1261 */),
                       (0xd6 /* 1262 */), (0x24 /* 1263 */),
                       (0xe6 /* 1264 */), (0x51 /* 1265 */),
                       (0x52 /* 1266 */), (0xab /* 1267 */),
                       (0x8f /* 1268 */), (0x53 /* 1269 */),
                       (0x0c /* 1270 */), (0x35 /* 1271 */),
                       (0x9f /* 1272 */), (0x08 /* 1273 */),
                       (0x61 /* 1274 */), (0xd8 /* 1275 */),
                       (0x07 /* 1276 */), (0xca /* 1277 */),
                       (0x0d /* 1278 */), (0xbf /* 1279 */),
                       (0x50 /* 1280 */), (0x0d /* 1281 */),
                       (0x6a /* 1282 */), (0x61 /* 1283 */),
                       (0x56 /* 1284 */), (0xa3 /* 1285 */),
                       (0x8e /* 1286 */), (0x08 /* 1287 */),
                       (0x8a /* 1288 */), (0x22 /* 1289 */),
                       (0xb6 /* 1290 */), (0x5e /* 1291 */),
                       (0x52 /* 1292 */), (0xbc /* 1293 */),
                       (0x51 /* 1294 */), (0x4d /* 1295 */),
                       (0x16 /* 1296 */), (0xcc /* 1297 */),
                       (0xf8 /* 1298 */), (0x06 /* 1299 */),
                       (0x81 /* 1300 */), (0x8c /* 1301 */),
                       (0xe9 /* 1302 */), (0x1a /* 1303 */),
                       (0xb7 /* 1304 */), (0x79 /* 1305 */),
                       (0x37 /* 1306 */), (0x36 /* 1307 */),
                       (0x5a /* 1308 */), (0xf9 /* 1309 */),
                       (0x0b /* 1310 */), (0xbf /* 1311 */),
                       (0x74 /* 1312 */), (0xa3 /* 1313 */),
                       (0x5b /* 1314 */), (0xe6 /* 1315 */),
                       (0xb4 /* 1316 */), (0x0b /* 1317 */),
                       (0x8e /* 1318 */), (0xed /* 1319 */),
                       (0xf2 /* 1320 */), (0x78 /* 1321 */),
                       (0x5e /* 1322 */), (0x42 /* 1323 */),
                       (0x87 /* 1324 */), (0x4d /* 1325 */)] /* 1326 */) /*
                     1327 */)) /* 1328 */);
    let key /* pat 1017 */ =
        ((classify_u8s /* 1019
             */)((&((<[_]>::into_vec /* 1332
                        */)((box
                                ([(0u8 /* 1333 */), (1u8 /* 1334 */),
                                  (2u8 /* 1335 */), (3u8 /* 1336 */),
                                  (4u8 /* 1337 */), (5u8 /* 1338 */),
                                  (6u8 /* 1339 */), (7u8 /* 1340 */),
                                  (8u8 /* 1341 */), (9u8 /* 1342 */),
                                  (10u8 /* 1343 */), (11u8 /* 1344 */),
                                  (12u8 /* 1345 */), (13u8 /* 1346 */),
                                  (14u8 /* 1347 */), (15u8 /* 1348 */),
                                  (16u8 /* 1349 */), (17u8 /* 1350 */),
                                  (18u8 /* 1351 */), (19u8 /* 1352 */),
                                  (20u8 /* 1353 */), (21u8 /* 1354 */),
                                  (22u8 /* 1355 */), (23u8 /* 1356 */),
                                  (24u8 /* 1357 */), (25u8 /* 1358 */),
                                  (26u8 /* 1359 */), (27u8 /* 1360 */),
                                  (28u8 /* 1361 */), (29u8 /* 1362 */),
                                  (30u8 /* 1363 */), (31u8 /* 1364 */)] /*
                                    1365 */) /* 1366 */)) /* 1367 */) /* 1020
                     */)) /* 1021 */);
    let nonce /* pat 1023 */ =
        ((<[_]>::into_vec /* 1371
             */)((box
                     ([(0x0 /* 1372 */), (0x0 /* 1373 */), (0x0 /* 1374 */),
                       (0x0 /* 1375 */), (0x0 /* 1376 */), (0x0 /* 1377 */),
                       (0x0 /* 1378 */), (0x4a /* 1379 */), (0x0 /* 1380 */),
                       (0x0 /* 1381 */), (0x0 /* 1382 */), (0x0 /* 1383 */)]
                         /* 1384 */) /* 1385 */)) /* 1386 */);
    let computed_ciphertext /* pat 1025 */ =
        ((chacha20_encrypt /* 1027
             */)((&(key /* 1029 */) /* 1030 */), (1u32 /* 1031 */),
                 (&(nonce /* 1033 */) /* 1034 */),
                 (&(plaintext /* 1036 */) /* 1037 */)) /* 1038 */);
    (for (i /* pat 1040 */, (x1 /* pat 1042 */, x2 /* pat 1043 */) /* pat 1041
          */) /* pat 1039 */ in
         ((((ciphertext /* 1048 */).iter() /* 1049
               */).zip((computed_ciphertext /* 1051 */)) /* 1052
              */).enumerate() /* 1053 */) {
         ({
              (match (((&(*(x1 /* 1389 */) /* 1390 */) /* 1391 */),
                       (&(x2 /* 1393 */) /* 1394 */)) /* 1395 */) {
                   (left_val /* pat 1398 */, right_val /* pat 1399 */) /*
                   pat 1397 */ => {
                       (if (!((((*(left_val /* 1402 */) /* 1403 */) ==
                                   (*(right_val /* 1405 */) /* 1406 */) /*
                                   1407 */)) /* 1407 */) /* 1408 */) {
                            let kind /* pat 1411 */ =
                                (::core::panicking::AssertKind::Eq /* 1416
                                    */);
                            ((::core::panicking::assert_failed /* 1420
                                 */)((kind /* 1422 */),
                                     (&(*(left_val /* 1424 */) /* 1425 */) /*
                                         1426 */),
                                     (&(*(right_val /* 1428 */) /* 1429 */) /*
                                         1430 */),
                                     ((::core::option::Option::Some /* 1435
                                          */)(((::core::fmt::Arguments::new_v1
                                                   /* 1446
                                                   */)((&([("at index " /*
                                                               1447 */)] /*
                                                             1448 */) /* 1449
                                                           */),
                                                       (&(match (((&(i /* 1451
                                                                        */) /*
                                                                      1452
                                                                      */),) /*
                                                                    1453 */) {
                                                              (arg0 /*
                                                               pat 1456 */,)
                                                              /* pat 1455 */
                                                              =>
                                                              ([((::core::fmt::ArgumentV1::new
                                                                     /* 1461
                                                                     */)((arg0
                                                                             /*
                                                                             1463
                                                                             */),
                                                                         (::core::fmt::Debug::fmt
                                                                             /*
                                                                             1468
                                                                             */))
                                                                    /* 1469
                                                                    */)] /*
                                                                  1470 */),
                                                          } /* 1471 */) /*
                                                           1472 */)) /* 1473
                                                  */)) /* 1436 */)) /* 1437
                                */);
                        } /* block 1409 */ /* 1438 */)
                   }
                       /*
                       block 1400
                       */
               } /* 1440 */)
          } /* block 1387 */ /* 1441 */);
     } /* block 1054 */ /* 1055 */)
    ((dummy_generic /* 1057 */)((nonce /* 1059 */), (key /* 1061 */)) /* 1062
        */);
} /* block 1011 */ /* 1010 */
