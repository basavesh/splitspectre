#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2018::*; /* 4 */
#[macro_use]
extern crate std; /* 9 */
use secret_integers::*; /* 10 */

const BLOCK_SIZE: usize = (64 /* 15 */); /* 12 */
type State = [U32; (16 /* 21 */)]; /* 16 */
type Key = Vec<U8>; /* 22 */
type Nonce = Vec<U8>; /* 27 */
type Block = [U8; (64 /* 37 */)]; /* 32 */
type Constants = [u32; (4 /* 43 */)]; /* 38 */
type Index = usize; /* 44 */
type RotVal = u32; /* 47 */

pub fn classify_u32s(v /* pat 52 */: &[u32]) -> Vec<U32> {
    ((((v /* 66 */).iter() /* 67
          */).map((|x /* pat 69 */|
                      ((U32::classify /* 73 */)((*(x /* 75 */) /* 76 */)) /*
                          77 */) /* 78 */)) /* 79 */).collect() /* 80 */)
} /* block 61 */ /* 50 */

pub fn classify_u8s(v /* pat 83 */: &[u8]) -> Vec<U8> {
    ((((v /* 97 */).iter() /* 98
          */).map((|x /* pat 100 */|
                      ((U8::classify /* 104 */)((*(x /* 106 */) /* 107 */)) /*
                          108 */) /* 109 */)) /* 110 */).collect() /* 111 */)
} /* block 92 */ /* 81 */

pub fn declassify_u8s(v /* pat 114 */: &[U8]) -> Vec<u8> {
    ((((v /* 128 */).iter() /* 129
          */).map((|x /* pat 131 */|
                      ((U8::declassify /* 135 */)((*(x /* 137 */) /* 138 */))
                          /* 139 */) /* 140 */)) /* 141 */).collect() /* 142
        */)
} /* block 123 */ /* 112 */

fn line(a /* pat 145 */: Index, b /* pat 149 */: Index,
        d /* pat 153 */: Index, s /* pat 157 */: RotVal,
        m /* pat 161 */: &mut State) {
    (((m /* 167 */)[(a /* 169 */)] /* 170 */) =
        (((m /* 172 */)[(a /* 174 */)] /* 175 */) +
            ((m /* 177 */)[(b /* 179 */)] /* 180 */) /* 181 */) /* 182 */);
    (((m /* 184 */)[(d /* 186 */)] /* 187 */) =
        (((m /* 189 */)[(d /* 191 */)] /* 192 */) ^
            ((m /* 194 */)[(a /* 196 */)] /* 197 */) /* 198 */) /* 199 */);
    (((m /* 201 */)[(d /* 203 */)] /* 204 */) =
        (((m /* 207 */)[(d /* 209 */)] /* 210 */).rotate_left((s /* 212 */))
            /* 213 */) /* 214 */);
} /* block 165 */ /* 143 */

fn quarter_round(a /* pat 217 */: Index, b /* pat 221 */: Index,
                 c /* pat 225 */: Index, d /* pat 229 */: Index,
                 m /* pat 233 */: &mut State) {
    ((line /* 239
         */)((a /* 241 */), (b /* 243 */), (d /* 245 */), (16 /* 246 */),
             (m /* 248 */)) /* 249 */);
    ((line /* 251
         */)((c /* 253 */), (d /* 255 */), (b /* 257 */), (12 /* 258 */),
             (m /* 260 */)) /* 261 */);
    ((line /* 263
         */)((a /* 265 */), (b /* 267 */), (d /* 269 */), (8 /* 270 */),
             (m /* 272 */)) /* 273 */);
    ((line /* 275
         */)((c /* 277 */), (d /* 279 */), (b /* 281 */), (7 /* 282 */),
             (m /* 284 */)) /* 285 */);
} /* block 237 */ /* 215 */

fn double_round(m /* pat 288 */: &mut State) {
    ((quarter_round /* 294
         */)((0 /* 295 */), (4 /* 296 */), (8 /* 297 */), (12 /* 298 */),
             (m /* 300 */)) /* 301 */);
    ((quarter_round /* 303
         */)((1 /* 304 */), (5 /* 305 */), (9 /* 306 */), (13 /* 307 */),
             (m /* 309 */)) /* 310 */);
    ((quarter_round /* 312
         */)((2 /* 313 */), (6 /* 314 */), (10 /* 315 */), (14 /* 316 */),
             (m /* 318 */)) /* 319 */);
    ((quarter_round /* 321
         */)((3 /* 322 */), (7 /* 323 */), (11 /* 324 */), (15 /* 325 */),
             (m /* 327 */)) /* 328 */);

    ((quarter_round /* 330
         */)((0 /* 331 */), (5 /* 332 */), (10 /* 333 */), (15 /* 334 */),
             (m /* 336 */)) /* 337 */);
    ((quarter_round /* 339
         */)((1 /* 340 */), (6 /* 341 */), (11 /* 342 */), (12 /* 343 */),
             (m /* 345 */)) /* 346 */);
    ((quarter_round /* 348
         */)((2 /* 349 */), (7 /* 350 */), (8 /* 351 */), (13 /* 352 */),
             (m /* 354 */)) /* 355 */);
    ((quarter_round /* 357
         */)((3 /* 358 */), (4 /* 359 */), (9 /* 360 */), (14 /* 361 */),
             (m /* 363 */)) /* 364 */);
} /* block 292 */ /* 286 */

const CONSTANTS: Constants =
    ([(0x61707865 /* 368 */), (0x3320646e /* 369 */), (0x79622d32 /* 370 */),
      (0x6b206574 /* 371 */)] /* 372 */); /* 365 */

fn chacha20_init(k /* pat 375 */: &Key, counter /* pat 380 */: U32,
                 nonce /* pat 384 */: &Nonce) -> State {
    let mut st /* pat 392 */ =
        ([((U32::classify /* 395 */)((0u32 /* 396 */)) /* 397 */);
             (16 /* 399 */)] /* 400 */);
    (((st /* 403 */)[((0 /* 404 */)..(4 /* 405 */) /* 406 */)] /* 407
         */).copy_from_slice((&((classify_u32s /* 409
                                    */)((&(CONSTANTS /* 411 */) /* 412 */)) /*
                                   413 */) /* 414 */)) /* 415 */);
    (((st /* 418 */)[((4 /* 419 */)..(12 /* 420 */) /* 421 */)] /* 422
         */).copy_from_slice((((U32::from_bytes_le /* 426 */)((k /* 428 */))
                                  /* 429 */).as_slice() /* 430 */)) /* 431
        */);
    (((st /* 433 */)[(12 /* 434 */)] /* 435 */) = (counter /* 437 */) /* 438
        */);
    (((st /* 441 */)[((13 /* 442 */)..(16 /* 443 */) /* 444 */)] /* 445
         */).copy_from_slice((((U32::from_bytes_le /* 449
                                   */)((nonce /* 451 */)) /* 452
                                  */).as_slice() /* 453 */)) /* 454 */);
    (st /* 456 */)
} /* block 390 */ /* 373 */

fn chacha20_core(st /* pat 459 */: &mut State) {
    let mut working_state /* pat 465 */ = ((st /* 468 */).clone() /* 469 */);
    (for _ /* pat 470 */ in ((0 /* 471 */)..(10 /* 472 */) /* 473 */) {
         ((double_round /* 476 */)((&mut (working_state /* 478 */) /* 479 */))
             /* 480 */);
     } /* block 474 */ /* 481 */)
    (for i /* pat 482 */ in ((0 /* 483 */)..(16 /* 484 */) /* 485 */) {
         (((st /* 488 */)[(i /* 490 */)] /* 491 */) +=
             ((working_state /* 493 */)[(i /* 495 */)] /* 496 */) /* 497 */);
     } /* block 486 */ /* 498 */)
} /* block 463 */ /* 457 */

fn chacha20(k /* pat 501 */: &Key, counter /* pat 506 */: U32,
            nonce /* pat 510 */: &Nonce) -> State {
    let mut st /* pat 518 */ =
        ((chacha20_init /* 520
             */)((k /* 522 */), (counter /* 524 */), (nonce /* 526 */)) /* 527
            */);
    ((chacha20_core /* 529 */)((&mut (st /* 531 */) /* 532 */)) /* 533 */);
    (st /* 535 */)
} /* block 516 */ /* 499 */

fn chacha20_block(k /* pat 538 */: &Key, counter /* pat 543 */: U32,
                  nonce /* pat 547 */: &Nonce) -> Block {
    let st /* pat 555 */ =
        ((chacha20 /* 557
             */)((k /* 559 */), (counter /* 561 */), (nonce /* 563 */)) /* 564
            */);
    let mut block /* pat 566 */ =
        ([((U8::classify /* 569 */)((0u8 /* 570 */)) /* 571 */);
             (BLOCK_SIZE /* 574 */)] /* 575 */);
    ((block /* 578
         */).copy_from_slice((((U32::to_bytes_le /* 582
                                   */)((&(st /* 584 */) /* 585 */)) /* 586
                                  */).as_slice() /* 587 */)) /* 588 */);
    (block /* 590 */)
} /* block 553 */ /* 536 */

fn xor_block(block /* pat 593 */: &Block, key_block /* pat 598 */: &Block)
 -> Block {
    let mut v_out /* pat 606 */ =
        ([((Default::default /* 609 */)() /* 610 */); (BLOCK_SIZE /* 613 */)]
            /* 614 */);
    (for i /* pat 615 */ in ((0 /* 616 */)..(BLOCK_SIZE /* 618 */) /* 619 */)
         {
         (((v_out /* 622 */)[(i /* 624 */)] /* 625 */) =
             (((block /* 627 */)[(i /* 629 */)] /* 630 */) ^
                 ((key_block /* 632 */)[(i /* 634 */)] /* 635 */) /* 636 */)
             /* 637 */);
     } /* block 620 */ /* 638 */)
    let mut out /* pat 640 */ =
        ([((Default::default /* 643 */)() /* 644 */); (BLOCK_SIZE /* 647 */)]
            /* 648 */);
    ((out /* 651 */).copy_from_slice((&(v_out /* 653 */) /* 654 */)) /* 655
        */);
    (out /* 657 */)
} /* block 604 */ /* 591 */

fn chacha20_counter_mode(key /* pat 660 */: &Key, counter /* pat 665 */: U32,
                         nonce /* pat 669 */: &Nonce,
                         msg /* pat 674 */: &Vec<U8>) -> Vec<U8> {
    let mut blocks /* pat 686 */: Vec<[U8; (BLOCK_SIZE /* 694 */)]> =
        ((((msg /* 699 */).chunks((BLOCK_SIZE /* 701 */)) /* 702
              */).map((|block /* pat 704 */|
                          ({
                               let mut new_block /* pat 708 */ =
                                   ([((U8::zero /* 711 */)() /* 712 */);
                                        (BLOCK_SIZE /* 715 */)] /* 716 */);
                               (((new_block /* 719
                                     */)[((0 /* 720
                                              */)..((block /* 723 */).len() /*
                                                       724 */) /* 725 */)] /*
                                    726 */).copy_from_slice((block /* 728 */))
                                   /* 729 */);
                               (new_block /* 731 */)
                           } /* block 706 */ /* 732 */) /* 733 */)) /* 734
             */).collect() /* 735 */);
    let nb_blocks /* pat 737 */ = ((blocks /* 740 */).len() /* 741 */);
    let mut key_block /* pat 743 */: [U8; (BLOCK_SIZE /* 749 */)];
    let mut ctr /* pat 751 */ = (counter /* 753 */);
    (for i /* pat 754 */ in
         ((0 /* 755
              */)..(((blocks /* 758 */).len() /* 759 */) - (1 /* 760 */) /*
                       761 */) /* 762 */) {
         ((key_block /* 765 */) =
             ((chacha20_block /* 767
                  */)((key /* 769 */), (ctr /* 771 */), (nonce /* 773 */)) /*
                 774 */) /* 775 */);
         (((blocks /* 777 */)[(i /* 779 */)] /* 780 */) =
             ((xor_block /* 782
                  */)((&((blocks /* 784 */)[(i /* 786 */)] /* 787 */) /* 788
                          */), (&(key_block /* 790 */) /* 791 */)) /* 792 */)
             /* 793 */);
         ((ctr /* 795 */) += ((U32::one /* 798 */)() /* 799 */) /* 800 */);
     } /* block 763 */ /* 801 */)
    let last /* pat 803 */ =
        (&mut ((blocks /* 805
                   */)[((nb_blocks /* 807 */) - (1 /* 808 */) /* 809 */)] /*
                  810 */) /* 811 */);
    ((key_block /* 813 */) =
        ((chacha20_block /* 815
             */)((key /* 817 */), (ctr /* 819 */), (nonce /* 821 */)) /* 822
            */) /* 823 */);
    ((*(last /* 825 */) /* 826 */) =
        ((xor_block /* 828
             */)((last /* 830 */), (&(key_block /* 832 */) /* 833 */)) /* 834
            */) /* 835 */);
    ((((((blocks /* 842 */).iter() /* 843
            */).map((|block /* pat 845 */|
                        ((block /* 849 */).to_vec() /* 850 */) /* 851 */)) /*
           852 */).flatten() /* 853
          */).take(((msg /* 856 */).len() /* 857 */)) /* 858 */).collect() /*
        859 */)
} /* block 684 */ /* 658 */

pub fn chacha20_encrypt(key /* pat 862 */: &Key, counter /* pat 867 */: u32,
                        nonce /* pat 871 */: &Vec<u8>,
                        msg /* pat 878 */: &Vec<u8>) -> Vec<u8> {
    let nonce /* pat 890 */ =
        (&((classify_u8s /* 892 */)((nonce /* 894 */)) /* 895 */) /* 896 */);
    let msg /* pat 898 */ =
        (&((classify_u8s /* 900 */)((msg /* 902 */)) /* 903 */) /* 904 */);
    ((declassify_u8s /* 906
         */)((&((chacha20_counter_mode /* 908
                    */)((key /* 910 */),
                        ((counter /* 913 */).into() /* 914 */),
                        (nonce /* 916 */), (msg /* 918 */)) /* 919 */) /* 920
                 */)) /* 921 */)
} /* block 888 */ /* 860 */

pub fn chacha20_decrypt(key /* pat 924 */: &Key, counter /* pat 929 */: u32,
                        nonce /* pat 933 */: &Vec<u8>,
                        msg /* pat 940 */: &Vec<u8>) -> Vec<u8> {
    let nonce /* pat 952 */ =
        (&((classify_u8s /* 954 */)((nonce /* 956 */)) /* 957 */) /* 958 */);
    let msg /* pat 960 */ =
        (&((classify_u8s /* 962 */)((msg /* 964 */)) /* 965 */) /* 966 */);
    ((declassify_u8s /* 968
         */)((&((chacha20_counter_mode /* 970
                    */)((key /* 972 */),
                        ((counter /* 975 */).into() /* 976 */),
                        (nonce /* 978 */), (msg /* 980 */)) /* 981 */) /* 982
                 */)) /* 983 */)
} /* block 950 */ /* 922 */

fn main() {
    let plaintext /* pat 987 */ =
        ((<[_]>::into_vec /* 1033
             */)((box
                     ([(0x4c /* 1034 */), (0x61 /* 1035 */),
                       (0x64 /* 1036 */), (0x69 /* 1037 */),
                       (0x65 /* 1038 */), (0x73 /* 1039 */),
                       (0x20 /* 1040 */), (0x61 /* 1041 */),
                       (0x6e /* 1042 */), (0x64 /* 1043 */),
                       (0x20 /* 1044 */), (0x47 /* 1045 */),
                       (0x65 /* 1046 */), (0x6e /* 1047 */),
                       (0x74 /* 1048 */), (0x6c /* 1049 */),
                       (0x65 /* 1050 */), (0x6d /* 1051 */),
                       (0x65 /* 1052 */), (0x6e /* 1053 */),
                       (0x20 /* 1054 */), (0x6f /* 1055 */),
                       (0x66 /* 1056 */), (0x20 /* 1057 */),
                       (0x74 /* 1058 */), (0x68 /* 1059 */),
                       (0x65 /* 1060 */), (0x20 /* 1061 */),
                       (0x63 /* 1062 */), (0x6c /* 1063 */),
                       (0x61 /* 1064 */), (0x73 /* 1065 */),
                       (0x73 /* 1066 */), (0x20 /* 1067 */),
                       (0x6f /* 1068 */), (0x66 /* 1069 */),
                       (0x20 /* 1070 */), (0x27 /* 1071 */),
                       (0x39 /* 1072 */), (0x39 /* 1073 */),
                       (0x3a /* 1074 */), (0x20 /* 1075 */),
                       (0x49 /* 1076 */), (0x66 /* 1077 */),
                       (0x20 /* 1078 */), (0x49 /* 1079 */),
                       (0x20 /* 1080 */), (0x63 /* 1081 */),
                       (0x6f /* 1082 */), (0x75 /* 1083 */),
                       (0x6c /* 1084 */), (0x64 /* 1085 */),
                       (0x20 /* 1086 */), (0x6f /* 1087 */),
                       (0x66 /* 1088 */), (0x66 /* 1089 */),
                       (0x65 /* 1090 */), (0x72 /* 1091 */),
                       (0x20 /* 1092 */), (0x79 /* 1093 */),
                       (0x6f /* 1094 */), (0x75 /* 1095 */),
                       (0x20 /* 1096 */), (0x6f /* 1097 */),
                       (0x6e /* 1098 */), (0x6c /* 1099 */),
                       (0x79 /* 1100 */), (0x20 /* 1101 */),
                       (0x6f /* 1102 */), (0x6e /* 1103 */),
                       (0x65 /* 1104 */), (0x20 /* 1105 */),
                       (0x74 /* 1106 */), (0x69 /* 1107 */),
                       (0x70 /* 1108 */), (0x20 /* 1109 */),
                       (0x66 /* 1110 */), (0x6f /* 1111 */),
                       (0x72 /* 1112 */), (0x20 /* 1113 */),
                       (0x74 /* 1114 */), (0x68 /* 1115 */),
                       (0x65 /* 1116 */), (0x20 /* 1117 */),
                       (0x66 /* 1118 */), (0x75 /* 1119 */),
                       (0x74 /* 1120 */), (0x75 /* 1121 */),
                       (0x72 /* 1122 */), (0x65 /* 1123 */),
                       (0x2c /* 1124 */), (0x20 /* 1125 */),
                       (0x73 /* 1126 */), (0x75 /* 1127 */),
                       (0x6e /* 1128 */), (0x73 /* 1129 */),
                       (0x63 /* 1130 */), (0x72 /* 1131 */),
                       (0x65 /* 1132 */), (0x65 /* 1133 */),
                       (0x6e /* 1134 */), (0x20 /* 1135 */),
                       (0x77 /* 1136 */), (0x6f /* 1137 */),
                       (0x75 /* 1138 */), (0x6c /* 1139 */),
                       (0x64 /* 1140 */), (0x20 /* 1141 */),
                       (0x62 /* 1142 */), (0x65 /* 1143 */),
                       (0x20 /* 1144 */), (0x69 /* 1145 */),
                       (0x74 /* 1146 */), (0x2e /* 1147 */)] /* 1148 */) /*
                     1149 */)) /* 1150 */);
    let ciphertext /* pat 989 */ =
        ((<[_]>::into_vec /* 1154
             */)((box
                     ([(0x6e /* 1155 */), (0x2e /* 1156 */),
                       (0x35 /* 1157 */), (0x9a /* 1158 */),
                       (0x25 /* 1159 */), (0x68 /* 1160 */),
                       (0xf9 /* 1161 */), (0x80 /* 1162 */),
                       (0x41 /* 1163 */), (0xba /* 1164 */),
                       (0x07 /* 1165 */), (0x28 /* 1166 */),
                       (0xdd /* 1167 */), (0x0d /* 1168 */),
                       (0x69 /* 1169 */), (0x81 /* 1170 */),
                       (0xe9 /* 1171 */), (0x7e /* 1172 */),
                       (0x7a /* 1173 */), (0xec /* 1174 */),
                       (0x1d /* 1175 */), (0x43 /* 1176 */),
                       (0x60 /* 1177 */), (0xc2 /* 1178 */),
                       (0x0a /* 1179 */), (0x27 /* 1180 */),
                       (0xaf /* 1181 */), (0xcc /* 1182 */),
                       (0xfd /* 1183 */), (0x9f /* 1184 */),
                       (0xae /* 1185 */), (0x0b /* 1186 */),
                       (0xf9 /* 1187 */), (0x1b /* 1188 */),
                       (0x65 /* 1189 */), (0xc5 /* 1190 */),
                       (0x52 /* 1191 */), (0x47 /* 1192 */),
                       (0x33 /* 1193 */), (0xab /* 1194 */),
                       (0x8f /* 1195 */), (0x59 /* 1196 */),
                       (0x3d /* 1197 */), (0xab /* 1198 */),
                       (0xcd /* 1199 */), (0x62 /* 1200 */),
                       (0xb3 /* 1201 */), (0x57 /* 1202 */),
                       (0x16 /* 1203 */), (0x39 /* 1204 */),
                       (0xd6 /* 1205 */), (0x24 /* 1206 */),
                       (0xe6 /* 1207 */), (0x51 /* 1208 */),
                       (0x52 /* 1209 */), (0xab /* 1210 */),
                       (0x8f /* 1211 */), (0x53 /* 1212 */),
                       (0x0c /* 1213 */), (0x35 /* 1214 */),
                       (0x9f /* 1215 */), (0x08 /* 1216 */),
                       (0x61 /* 1217 */), (0xd8 /* 1218 */),
                       (0x07 /* 1219 */), (0xca /* 1220 */),
                       (0x0d /* 1221 */), (0xbf /* 1222 */),
                       (0x50 /* 1223 */), (0x0d /* 1224 */),
                       (0x6a /* 1225 */), (0x61 /* 1226 */),
                       (0x56 /* 1227 */), (0xa3 /* 1228 */),
                       (0x8e /* 1229 */), (0x08 /* 1230 */),
                       (0x8a /* 1231 */), (0x22 /* 1232 */),
                       (0xb6 /* 1233 */), (0x5e /* 1234 */),
                       (0x52 /* 1235 */), (0xbc /* 1236 */),
                       (0x51 /* 1237 */), (0x4d /* 1238 */),
                       (0x16 /* 1239 */), (0xcc /* 1240 */),
                       (0xf8 /* 1241 */), (0x06 /* 1242 */),
                       (0x81 /* 1243 */), (0x8c /* 1244 */),
                       (0xe9 /* 1245 */), (0x1a /* 1246 */),
                       (0xb7 /* 1247 */), (0x79 /* 1248 */),
                       (0x37 /* 1249 */), (0x36 /* 1250 */),
                       (0x5a /* 1251 */), (0xf9 /* 1252 */),
                       (0x0b /* 1253 */), (0xbf /* 1254 */),
                       (0x74 /* 1255 */), (0xa3 /* 1256 */),
                       (0x5b /* 1257 */), (0xe6 /* 1258 */),
                       (0xb4 /* 1259 */), (0x0b /* 1260 */),
                       (0x8e /* 1261 */), (0xed /* 1262 */),
                       (0xf2 /* 1263 */), (0x78 /* 1264 */),
                       (0x5e /* 1265 */), (0x42 /* 1266 */),
                       (0x87 /* 1267 */), (0x4d /* 1268 */)] /* 1269 */) /*
                     1270 */)) /* 1271 */);
    let key /* pat 991 */ =
        ((classify_u8s /* 993
             */)((&((<[_]>::into_vec /* 1275
                        */)((box
                                ([(0u8 /* 1276 */), (1u8 /* 1277 */),
                                  (2u8 /* 1278 */), (3u8 /* 1279 */),
                                  (4u8 /* 1280 */), (5u8 /* 1281 */),
                                  (6u8 /* 1282 */), (7u8 /* 1283 */),
                                  (8u8 /* 1284 */), (9u8 /* 1285 */),
                                  (10u8 /* 1286 */), (11u8 /* 1287 */),
                                  (12u8 /* 1288 */), (13u8 /* 1289 */),
                                  (14u8 /* 1290 */), (15u8 /* 1291 */),
                                  (16u8 /* 1292 */), (17u8 /* 1293 */),
                                  (18u8 /* 1294 */), (19u8 /* 1295 */),
                                  (20u8 /* 1296 */), (21u8 /* 1297 */),
                                  (22u8 /* 1298 */), (23u8 /* 1299 */),
                                  (24u8 /* 1300 */), (25u8 /* 1301 */),
                                  (26u8 /* 1302 */), (27u8 /* 1303 */),
                                  (28u8 /* 1304 */), (29u8 /* 1305 */),
                                  (30u8 /* 1306 */), (31u8 /* 1307 */)] /*
                                    1308 */) /* 1309 */)) /* 1310 */) /* 994
                     */)) /* 995 */);
    let nonce /* pat 997 */ =
        ((<[_]>::into_vec /* 1314
             */)((box
                     ([(0x0 /* 1315 */), (0x0 /* 1316 */), (0x0 /* 1317 */),
                       (0x0 /* 1318 */), (0x0 /* 1319 */), (0x0 /* 1320 */),
                       (0x0 /* 1321 */), (0x4a /* 1322 */), (0x0 /* 1323 */),
                       (0x0 /* 1324 */), (0x0 /* 1325 */), (0x0 /* 1326 */)]
                         /* 1327 */) /* 1328 */)) /* 1329 */);
    let computed_ciphertext /* pat 999 */ =
        ((chacha20_encrypt /* 1001
             */)((&(key /* 1003 */) /* 1004 */), (1u32 /* 1005 */),
                 (&(nonce /* 1007 */) /* 1008 */),
                 (&(plaintext /* 1010 */) /* 1011 */)) /* 1012 */);
    (for (i /* pat 1014 */, (x1 /* pat 1016 */, x2 /* pat 1017 */) /* pat 1015
          */) /* pat 1013 */ in
         ((((ciphertext /* 1022 */).iter() /* 1023
               */).zip((computed_ciphertext /* 1025 */)) /* 1026
              */).enumerate() /* 1027 */) {
         ({
              (match (((&(*(x1 /* 1332 */) /* 1333 */) /* 1334 */),
                       (&(x2 /* 1336 */) /* 1337 */)) /* 1338 */) {
                   (left_val /* pat 1341 */, right_val /* pat 1342 */) /*
                   pat 1340 */ => {
                       (if (!((((*(left_val /* 1345 */) /* 1346 */) ==
                                   (*(right_val /* 1348 */) /* 1349 */) /*
                                   1350 */)) /* 1350 */) /* 1351 */) {
                            let kind /* pat 1354 */ =
                                (::core::panicking::AssertKind::Eq /* 1359
                                    */);
                            ((::core::panicking::assert_failed /* 1363
                                 */)((kind /* 1365 */),
                                     (&(*(left_val /* 1367 */) /* 1368 */) /*
                                         1369 */),
                                     (&(*(right_val /* 1371 */) /* 1372 */) /*
                                         1373 */),
                                     ((::core::option::Option::Some /* 1378
                                          */)(((::core::fmt::Arguments::new_v1
                                                   /* 1389
                                                   */)((&([("at index " /*
                                                               1390 */)] /*
                                                             1391 */) /* 1392
                                                           */),
                                                       (&(match (((&(i /* 1394
                                                                        */) /*
                                                                      1395
                                                                      */),) /*
                                                                    1396 */) {
                                                              (arg0 /*
                                                               pat 1399 */,)
                                                              /* pat 1398 */
                                                              =>
                                                              ([((::core::fmt::ArgumentV1::new
                                                                     /* 1404
                                                                     */)((arg0
                                                                             /*
                                                                             1406
                                                                             */),
                                                                         (::core::fmt::Debug::fmt
                                                                             /*
                                                                             1411
                                                                             */))
                                                                    /* 1412
                                                                    */)] /*
                                                                  1413 */),
                                                          } /* 1414 */) /*
                                                           1415 */)) /* 1416
                                                  */)) /* 1379 */)) /* 1380
                                */);
                        } /* block 1352 */ /* 1381 */)
                   }
                       /*
                       block 1343
                       */
               } /* 1383 */)
          } /* block 1330 */ /* 1384 */);
     } /* block 1028 */ /* 1029 */)
} /* block 985 */ /* 984 */
