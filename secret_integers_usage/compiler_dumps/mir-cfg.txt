digraph __crate__ {
subgraph cluster_Mir_0_16 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn simple::get_secret_key() -&gt; std::vec::Vec&lt;secret_integers::U8&gt;<br align="left"/>let _1: [u8; 8];<br align="left"/>let mut _2: &amp;mut rand::prelude::ThreadRng;<br align="left"/>let mut _3: rand::prelude::ThreadRng;<br align="left"/>let mut _4: &amp;[u8];<br align="left"/>let mut _5: &amp;[u8; 8];<br align="left"/>let _6: &amp;[u8; 8];<br align="left"/>debug random_bytes =&gt; _1;<br align="left"/>>;
    bb0__0_16 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left">_3 = thread_rng()</td></tr></table>>];
    bb1__0_16 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_2 = &amp;mut _3<br/></td></tr><tr><td align="left">_1 = &lt;ThreadRng as Rng&gt;::gen::&lt;[u8; 8]&gt;(move _2)</td></tr></table>>];
    bb2__0_16 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left">drop(_3)</td></tr></table>>];
    bb3__0_16 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_6 = &amp;_1<br/>_5 = _6<br/>_4 = move _5 as &amp;[u8] (Pointer(Unsize))<br/></td></tr><tr><td align="left">_0 = classify_u8s(move _4)</td></tr></table>>];
    bb4__0_16 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">return</td></tr></table>>];
    bb5__0_16 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">5 (cleanup)</td></tr><tr><td align="left">drop(_3)</td></tr></table>>];
    bb6__0_16 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">6 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_16 -> bb1__0_16 [label="return"];
    bb1__0_16 -> bb2__0_16 [label="return"];
    bb1__0_16 -> bb5__0_16 [label="unwind"];
    bb2__0_16 -> bb3__0_16 [label="return"];
    bb3__0_16 -> bb4__0_16 [label="return"];
    bb5__0_16 -> bb6__0_16 [label="return"];
}
subgraph cluster_Mir_0_13 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn classify_u8s::{closure#0}(_1: &amp;mut [closure@secret_integers_usage/src/simple.rs:6:18: 6:38], _2: &amp;u8) -&gt; secret_integers::U8<br align="left"/>let mut _3: u8;<br align="left"/>debug x =&gt; _2;<br align="left"/>>;
    bb0__0_13 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_3 = (*_2)<br/></td></tr><tr><td align="left">_0 = secret_integers::U8::classify::&lt;u8&gt;(move _3)</td></tr></table>>];
    bb1__0_13 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_13 -> bb1__0_13 [label="return"];
}
subgraph cluster_Mir_0_23 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn main::{constant#0}() -&gt; usize<br align="left"/>>;
    bb0__0_23 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_0 = const 8_usize<br/></td></tr><tr><td align="left">return</td></tr></table>>];
}
subgraph cluster_Mir_0_20 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn simple::decrypt(_1: &amp;[u8], _2: &amp;[secret_integers::U8]) -&gt; std::vec::Vec&lt;u8&gt;<br align="left"/>let mut _3: [secret_integers::U8; 8];<br align="left"/>let mut _4: secret_integers::U8;<br align="left"/>let _5: std::vec::Vec&lt;secret_integers::U8&gt;;<br align="left"/>let mut _6: &amp;[u8];<br align="left"/>let mut _7: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _8: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _9: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _10: usize;<br align="left"/>let mut _11: std::option::Option&lt;usize&gt;;<br align="left"/>let mut _12: &amp;mut std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _13: &amp;mut std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _14: isize;<br align="left"/>let _15: usize;<br align="left"/>let mut _16: usize;<br align="left"/>let _17: usize;<br align="left"/>let mut _18: secret_integers::U8;<br align="left"/>let mut _19: secret_integers::U8;<br align="left"/>let mut _20: &amp;secret_integers::U8;<br align="left"/>let mut _21: &amp;std::vec::Vec&lt;secret_integers::U8&gt;;<br align="left"/>let mut _22: usize;<br align="left"/>let mut _23: secret_integers::U8;<br align="left"/>let _24: usize;<br align="left"/>let mut _25: usize;<br align="left"/>let mut _26: bool;<br align="left"/>let _27: usize;<br align="left"/>let mut _28: usize;<br align="left"/>let mut _29: bool;<br align="left"/>let mut _30: &amp;[secret_integers::U8];<br align="left"/>let mut _31: &amp;[secret_integers::U8; 8];<br align="left"/>let _32: &amp;[secret_integers::U8; 8];<br align="left"/>debug cipher =&gt; _1;<br align="left"/>debug sk =&gt; _2;<br align="left"/>debug new_block =&gt; _3;<br align="left"/>debug classified_cipher =&gt; _5;<br align="left"/>debug iter =&gt; _9;<br align="left"/>debug __next =&gt; _10;<br align="left"/>debug val =&gt; _15;<br align="left"/>debug i =&gt; _17;<br align="left"/>>;
    bb0__0_20 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left">_4 = secret_integers::U8::zero()</td></tr></table>>];
    bb1__0_20 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_3 = [move _4; 8]<br/>_6 = _1<br/></td></tr><tr><td align="left">_5 = classify_u8s(move _6)</td></tr></table>>];
    bb2__0_20 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">(_8.0: usize) = const 0_usize<br/>(_8.1: usize) = const 8_usize<br/></td></tr><tr><td align="left">_7 = &lt;std::ops::Range&lt;usize&gt; as IntoIterator&gt;::into_iter(move _8)</td></tr></table>>];
    bb3__0_20 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_9 = move _7<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb4__0_20 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_13 = &amp;mut _9<br/>_12 = &amp;mut (*_13)<br/></td></tr><tr><td align="left">_11 = &lt;std::ops::Range&lt;usize&gt; as Iterator&gt;::next(move _12)</td></tr></table>>];
    bb5__0_20 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">_14 = discriminant(_11)<br/></td></tr><tr><td align="left">switchInt(move _14)</td></tr></table>>];
    bb6__0_20 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">_32 = &amp;_3<br/>_31 = _32<br/>_30 = move _31 as &amp;[secret_integers::U8] (Pointer(Unsize))<br/></td></tr><tr><td align="left">_0 = declassify_u8s(move _30)</td></tr></table>>];
    bb7__0_20 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb8__0_20 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">_15 = ((_11 as Some).0: usize)<br/>_16 = _15<br/>_10 = move _16<br/>_17 = _10<br/>_21 = &amp;_5<br/>_22 = _17<br/></td></tr><tr><td align="left">_20 = &lt;Vec&lt;secret_integers::U8&gt; as Index&lt;usize&gt;&gt;::index(move _21, move _22)</td></tr></table>>];
    bb9__0_20 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">_19 = (*_20)<br/>_24 = _17<br/>_25 = Len((*_2))<br/>_26 = Lt(_24, _25)<br/></td></tr><tr><td align="left">assert(move _26, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _25, _24)</td></tr></table>>];
    bb10__0_20 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">_23 = (*_2)[_24]<br/></td></tr><tr><td align="left">_18 = &lt;secret_integers::U8 as BitXor&gt;::bitxor(move _19, move _23)</td></tr></table>>];
    bb11__0_20 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">_27 = _17<br/>_28 = const 8_usize<br/>_29 = Lt(_27, _28)<br/></td></tr><tr><td align="left">assert(move _29, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _28, _27)</td></tr></table>>];
    bb12__0_20 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">_3[_27] = move _18<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_20 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left">drop(_5)</td></tr></table>>];
    bb14__0_20 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left">return</td></tr></table>>];
    bb15__0_20 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">15 (cleanup)</td></tr><tr><td align="left">drop(_5)</td></tr></table>>];
    bb16__0_20 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">16 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_20 -> bb1__0_20 [label="return"];
    bb1__0_20 -> bb2__0_20 [label="return"];
    bb2__0_20 -> bb3__0_20 [label="return"];
    bb2__0_20 -> bb15__0_20 [label="unwind"];
    bb3__0_20 -> bb4__0_20 [label=""];
    bb4__0_20 -> bb5__0_20 [label="return"];
    bb4__0_20 -> bb15__0_20 [label="unwind"];
    bb5__0_20 -> bb6__0_20 [label="0_isize"];
    bb5__0_20 -> bb8__0_20 [label="1_isize"];
    bb5__0_20 -> bb7__0_20 [label="otherwise"];
    bb6__0_20 -> bb13__0_20 [label="return"];
    bb6__0_20 -> bb15__0_20 [label="unwind"];
    bb8__0_20 -> bb9__0_20 [label="return"];
    bb8__0_20 -> bb15__0_20 [label="unwind"];
    bb9__0_20 -> bb10__0_20 [label="success"];
    bb9__0_20 -> bb15__0_20 [label="unwind"];
    bb10__0_20 -> bb11__0_20 [label="return"];
    bb10__0_20 -> bb15__0_20 [label="unwind"];
    bb11__0_20 -> bb12__0_20 [label="success"];
    bb11__0_20 -> bb15__0_20 [label="unwind"];
    bb12__0_20 -> bb4__0_20 [label=""];
    bb13__0_20 -> bb14__0_20 [label="return"];
    bb15__0_20 -> bb16__0_20 [label="return"];
}
subgraph cluster_Mir_0_17 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn simple::get_secret_key::{constant#0}() -&gt; usize<br align="left"/>>;
    bb0__0_17 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_0 = const 8_usize<br/></td></tr><tr><td align="left">return</td></tr></table>>];
}
subgraph cluster_Mir_0_14 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn declassify_u8s(_1: &amp;[secret_integers::U8]) -&gt; std::vec::Vec&lt;u8&gt;<br align="left"/>let mut _2: std::iter::Map&lt;std::slice::Iter&lt;secret_integers::U8&gt;, [closure@secret_integers_usage/src/simple.rs:11:18: 11:40]&gt;;<br align="left"/>let mut _3: std::slice::Iter&lt;secret_integers::U8&gt;;<br align="left"/>let mut _4: &amp;[secret_integers::U8];<br align="left"/>let mut _5: [closure@secret_integers_usage/src/simple.rs:11:18: 11:40];<br align="left"/>debug v =&gt; _1;<br align="left"/>>;
    bb0__0_14 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_4 = _1<br/></td></tr><tr><td align="left">_3 = core::slice::&lt;impl [secret_integers::U8]&gt;::iter(move _4)</td></tr></table>>];
    bb1__0_14 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left">_2 = &lt;std::slice::Iter&lt;secret_integers::U8&gt; as Iterator&gt;::map::&lt;u8, [closure@secret_integers_usage/src/simple.rs:11:18: 11:40]&gt;(move _3, move _5)</td></tr></table>>];
    bb2__0_14 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left">_0 = &lt;Map&lt;std::slice::Iter&lt;secret_integers::U8&gt;, [closure@secret_integers_usage/src/simple.rs:11:18: 11:40]&gt; as Iterator&gt;::collect::&lt;Vec&lt;u8&gt;&gt;(move _2)</td></tr></table>>];
    bb3__0_14 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_14 -> bb1__0_14 [label="return"];
    bb1__0_14 -> bb2__0_14 [label="return"];
    bb2__0_14 -> bb3__0_14 [label="return"];
}
subgraph cluster_Mir_0_21 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn simple::decrypt::{constant#0}() -&gt; usize<br align="left"/>>;
    bb0__0_21 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_0 = const 8_usize<br/></td></tr><tr><td align="left">return</td></tr></table>>];
}
subgraph cluster_Mir_0_18 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn simple::encrypt(_1: &amp;[u8], _2: &amp;[secret_integers::U8]) -&gt; std::vec::Vec&lt;u8&gt;<br align="left"/>let mut _3: [secret_integers::U8; 8];<br align="left"/>let mut _4: secret_integers::U8;<br align="left"/>let _5: std::vec::Vec&lt;secret_integers::U8&gt;;<br align="left"/>let mut _6: &amp;[u8];<br align="left"/>let mut _7: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _8: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _9: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _10: usize;<br align="left"/>let mut _11: std::option::Option&lt;usize&gt;;<br align="left"/>let mut _12: &amp;mut std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _13: &amp;mut std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _14: isize;<br align="left"/>let _15: usize;<br align="left"/>let mut _16: usize;<br align="left"/>let _17: usize;<br align="left"/>let mut _18: secret_integers::U8;<br align="left"/>let mut _19: secret_integers::U8;<br align="left"/>let mut _20: &amp;secret_integers::U8;<br align="left"/>let mut _21: &amp;std::vec::Vec&lt;secret_integers::U8&gt;;<br align="left"/>let mut _22: usize;<br align="left"/>let mut _23: secret_integers::U8;<br align="left"/>let _24: usize;<br align="left"/>let mut _25: usize;<br align="left"/>let mut _26: bool;<br align="left"/>let _27: usize;<br align="left"/>let mut _28: usize;<br align="left"/>let mut _29: bool;<br align="left"/>let mut _30: &amp;[secret_integers::U8];<br align="left"/>let mut _31: &amp;[secret_integers::U8; 8];<br align="left"/>let _32: &amp;[secret_integers::U8; 8];<br align="left"/>debug msg =&gt; _1;<br align="left"/>debug sk =&gt; _2;<br align="left"/>debug new_block =&gt; _3;<br align="left"/>debug classified_msg =&gt; _5;<br align="left"/>debug iter =&gt; _9;<br align="left"/>debug __next =&gt; _10;<br align="left"/>debug val =&gt; _15;<br align="left"/>debug i =&gt; _17;<br align="left"/>>;
    bb0__0_18 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left">_4 = secret_integers::U8::zero()</td></tr></table>>];
    bb1__0_18 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_3 = [move _4; 8]<br/>_6 = _1<br/></td></tr><tr><td align="left">_5 = classify_u8s(move _6)</td></tr></table>>];
    bb2__0_18 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">(_8.0: usize) = const 0_usize<br/>(_8.1: usize) = const 8_usize<br/></td></tr><tr><td align="left">_7 = &lt;std::ops::Range&lt;usize&gt; as IntoIterator&gt;::into_iter(move _8)</td></tr></table>>];
    bb3__0_18 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_9 = move _7<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb4__0_18 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_13 = &amp;mut _9<br/>_12 = &amp;mut (*_13)<br/></td></tr><tr><td align="left">_11 = &lt;std::ops::Range&lt;usize&gt; as Iterator&gt;::next(move _12)</td></tr></table>>];
    bb5__0_18 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">_14 = discriminant(_11)<br/></td></tr><tr><td align="left">switchInt(move _14)</td></tr></table>>];
    bb6__0_18 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">_32 = &amp;_3<br/>_31 = _32<br/>_30 = move _31 as &amp;[secret_integers::U8] (Pointer(Unsize))<br/></td></tr><tr><td align="left">_0 = declassify_u8s(move _30)</td></tr></table>>];
    bb7__0_18 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb8__0_18 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">_15 = ((_11 as Some).0: usize)<br/>_16 = _15<br/>_10 = move _16<br/>_17 = _10<br/>_21 = &amp;_5<br/>_22 = _17<br/></td></tr><tr><td align="left">_20 = &lt;Vec&lt;secret_integers::U8&gt; as Index&lt;usize&gt;&gt;::index(move _21, move _22)</td></tr></table>>];
    bb9__0_18 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">_19 = (*_20)<br/>_24 = _17<br/>_25 = Len((*_2))<br/>_26 = Lt(_24, _25)<br/></td></tr><tr><td align="left">assert(move _26, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _25, _24)</td></tr></table>>];
    bb10__0_18 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">_23 = (*_2)[_24]<br/></td></tr><tr><td align="left">_18 = &lt;secret_integers::U8 as BitXor&gt;::bitxor(move _19, move _23)</td></tr></table>>];
    bb11__0_18 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">_27 = _17<br/>_28 = const 8_usize<br/>_29 = Lt(_27, _28)<br/></td></tr><tr><td align="left">assert(move _29, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _28, _27)</td></tr></table>>];
    bb12__0_18 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">_3[_27] = move _18<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_18 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left">drop(_5)</td></tr></table>>];
    bb14__0_18 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left">return</td></tr></table>>];
    bb15__0_18 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">15 (cleanup)</td></tr><tr><td align="left">drop(_5)</td></tr></table>>];
    bb16__0_18 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">16 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_18 -> bb1__0_18 [label="return"];
    bb1__0_18 -> bb2__0_18 [label="return"];
    bb2__0_18 -> bb3__0_18 [label="return"];
    bb2__0_18 -> bb15__0_18 [label="unwind"];
    bb3__0_18 -> bb4__0_18 [label=""];
    bb4__0_18 -> bb5__0_18 [label="return"];
    bb4__0_18 -> bb15__0_18 [label="unwind"];
    bb5__0_18 -> bb6__0_18 [label="0_isize"];
    bb5__0_18 -> bb8__0_18 [label="1_isize"];
    bb5__0_18 -> bb7__0_18 [label="otherwise"];
    bb6__0_18 -> bb13__0_18 [label="return"];
    bb6__0_18 -> bb15__0_18 [label="unwind"];
    bb8__0_18 -> bb9__0_18 [label="return"];
    bb8__0_18 -> bb15__0_18 [label="unwind"];
    bb9__0_18 -> bb10__0_18 [label="success"];
    bb9__0_18 -> bb15__0_18 [label="unwind"];
    bb10__0_18 -> bb11__0_18 [label="return"];
    bb10__0_18 -> bb15__0_18 [label="unwind"];
    bb11__0_18 -> bb12__0_18 [label="success"];
    bb11__0_18 -> bb15__0_18 [label="unwind"];
    bb12__0_18 -> bb4__0_18 [label=""];
    bb13__0_18 -> bb14__0_18 [label="return"];
    bb15__0_18 -> bb16__0_18 [label="return"];
}
subgraph cluster_Mir_0_15 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn declassify_u8s::{closure#0}(_1: &amp;mut [closure@secret_integers_usage/src/simple.rs:11:18: 11:40], _2: &amp;secret_integers::U8) -&gt; u8<br align="left"/>let mut _3: secret_integers::U8;<br align="left"/>debug x =&gt; _2;<br align="left"/>>;
    bb0__0_15 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_3 = (*_2)<br/></td></tr><tr><td align="left">_0 = secret_integers::U8::declassify(move _3)</td></tr></table>>];
    bb1__0_15 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_15 -> bb1__0_15 [label="return"];
}
subgraph cluster_Mir_0_12 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn classify_u8s(_1: &amp;[u8]) -&gt; std::vec::Vec&lt;secret_integers::U8&gt;<br align="left"/>let mut _2: std::iter::Map&lt;std::slice::Iter&lt;u8&gt;, [closure@secret_integers_usage/src/simple.rs:6:18: 6:38]&gt;;<br align="left"/>let mut _3: std::slice::Iter&lt;u8&gt;;<br align="left"/>let mut _4: &amp;[u8];<br align="left"/>let mut _5: [closure@secret_integers_usage/src/simple.rs:6:18: 6:38];<br align="left"/>debug v =&gt; _1;<br align="left"/>>;
    bb0__0_12 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_4 = _1<br/></td></tr><tr><td align="left">_3 = core::slice::&lt;impl [u8]&gt;::iter(move _4)</td></tr></table>>];
    bb1__0_12 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left">_2 = &lt;std::slice::Iter&lt;u8&gt; as Iterator&gt;::map::&lt;secret_integers::U8, [closure@secret_integers_usage/src/simple.rs:6:18: 6:38]&gt;(move _3, move _5)</td></tr></table>>];
    bb2__0_12 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left">_0 = &lt;Map&lt;std::slice::Iter&lt;u8&gt;, [closure@secret_integers_usage/src/simple.rs:6:18: 6:38]&gt; as Iterator&gt;::collect::&lt;Vec&lt;secret_integers::U8&gt;&gt;(move _2)</td></tr></table>>];
    bb3__0_12 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_12 -> bb1__0_12 [label="return"];
    bb1__0_12 -> bb2__0_12 [label="return"];
    bb2__0_12 -> bb3__0_12 [label="return"];
}
subgraph cluster_Mir_0_22 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn main() -&gt; ()<br align="left"/>let _1: std::vec::Vec&lt;secret_integers::U8&gt;;<br align="left"/>let mut _2: std::string::String;<br align="left"/>let _3: ();<br align="left"/>let mut _4: std::fmt::Arguments;<br align="left"/>let mut _5: &amp;[&amp;str];<br align="left"/>let mut _6: &amp;[&amp;str; 1];<br align="left"/>let _7: &amp;[&amp;str; 1];<br align="left"/>let mut _8: &amp;[std::fmt::ArgumentV1];<br align="left"/>let mut _9: &amp;[std::fmt::ArgumentV1; 0];<br align="left"/>let _10: &amp;[std::fmt::ArgumentV1; 0];<br align="left"/>let mut _11: std::result::Result&lt;usize, std::io::Error&gt;;<br align="left"/>let mut _12: &amp;std::io::Stdin;<br align="left"/>let _13: std::io::Stdin;<br align="left"/>let mut _14: &amp;mut std::string::String;<br align="left"/>let mut _15: &amp;mut std::string::String;<br align="left"/>let mut _16: [u8; 8];<br align="left"/>let mut _17: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _18: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _19: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _20: usize;<br align="left"/>let mut _21: std::option::Option&lt;usize&gt;;<br align="left"/>let mut _22: &amp;mut std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _23: &amp;mut std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _24: isize;<br align="left"/>let _25: usize;<br align="left"/>let mut _26: usize;<br align="left"/>let _27: usize;<br align="left"/>let mut _28: bool;<br align="left"/>let mut _29: usize;<br align="left"/>let mut _30: usize;<br align="left"/>let mut _31: &amp;std::string::String;<br align="left"/>let mut _32: u8;<br align="left"/>let mut _33: &amp;[u8];<br align="left"/>let mut _34: &amp;std::string::String;<br align="left"/>let _35: usize;<br align="left"/>let mut _36: usize;<br align="left"/>let mut _37: bool;<br align="left"/>let _38: usize;<br align="left"/>let mut _39: usize;<br align="left"/>let mut _40: bool;<br align="left"/>let _41: std::vec::Vec&lt;u8&gt;;<br align="left"/>let mut _42: &amp;[u8];<br align="left"/>let mut _43: &amp;[u8; 8];<br align="left"/>let _44: &amp;[u8; 8];<br align="left"/>let mut _45: &amp;[secret_integers::U8];<br align="left"/>let _46: &amp;[secret_integers::U8];<br align="left"/>let mut _47: &amp;std::vec::Vec&lt;secret_integers::U8&gt;;<br align="left"/>let _48: &amp;std::vec::Vec&lt;secret_integers::U8&gt;;<br align="left"/>let _49: std::vec::Vec&lt;u8&gt;;<br align="left"/>let mut _50: &amp;[u8];<br align="left"/>let _51: &amp;[u8];<br align="left"/>let mut _52: &amp;std::vec::Vec&lt;u8&gt;;<br align="left"/>let _53: &amp;std::vec::Vec&lt;u8&gt;;<br align="left"/>let mut _54: &amp;[secret_integers::U8];<br align="left"/>let _55: &amp;[secret_integers::U8];<br align="left"/>let mut _56: &amp;std::vec::Vec&lt;secret_integers::U8&gt;;<br align="left"/>let _57: &amp;std::vec::Vec&lt;secret_integers::U8&gt;;<br align="left"/>let mut _58: bool;<br align="left"/>let mut _59: bool;<br align="left"/>let mut _60: &amp;[u8; 8];<br align="left"/>let mut _61: &amp;&amp;[u8];<br align="left"/>let _62: &amp;[u8];<br align="left"/>let _63: &amp;[u8];<br align="left"/>let mut _64: &amp;std::vec::Vec&lt;u8&gt;;<br align="left"/>let mut _65: std::ops::RangeFull;<br align="left"/>let _66: ();<br align="left"/>let mut _67: std::fmt::Arguments;<br align="left"/>let mut _68: &amp;[&amp;str];<br align="left"/>let mut _69: &amp;[&amp;str; 2];<br align="left"/>let _70: &amp;[&amp;str; 2];<br align="left"/>let mut _71: &amp;[std::fmt::ArgumentV1];<br align="left"/>let mut _72: &amp;[std::fmt::ArgumentV1; 1];<br align="left"/>let _73: &amp;[std::fmt::ArgumentV1; 1];<br align="left"/>let _74: [std::fmt::ArgumentV1; 1];<br align="left"/>let mut _75: (&amp;[u8; 8],);<br align="left"/>let mut _76: &amp;[u8; 8];<br align="left"/>let _77: &amp;[u8; 8];<br align="left"/>let mut _78: std::fmt::ArgumentV1;<br align="left"/>let mut _79: &amp;[u8; 8];<br align="left"/>let mut _80: for&lt;'r, 's, 't0&gt; fn(&amp;'r [u8; 8], &amp;'s mut std::fmt::Formatter&lt;'t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt;;<br align="left"/>let _81: ();<br align="left"/>let mut _82: std::fmt::Arguments;<br align="left"/>let mut _83: &amp;[&amp;str];<br align="left"/>let mut _84: &amp;[&amp;str; 2];<br align="left"/>let _85: &amp;[&amp;str; 2];<br align="left"/>let mut _86: &amp;[std::fmt::ArgumentV1];<br align="left"/>let mut _87: &amp;[std::fmt::ArgumentV1; 1];<br align="left"/>let _88: &amp;[std::fmt::ArgumentV1; 1];<br align="left"/>let _89: [std::fmt::ArgumentV1; 1];<br align="left"/>let mut _90: (&amp;std::vec::Vec&lt;u8&gt;,);<br align="left"/>let mut _91: &amp;std::vec::Vec&lt;u8&gt;;<br align="left"/>let _92: &amp;std::vec::Vec&lt;u8&gt;;<br align="left"/>let mut _93: std::fmt::ArgumentV1;<br align="left"/>let mut _94: &amp;std::vec::Vec&lt;u8&gt;;<br align="left"/>let mut _95: for&lt;'r, 's, 't0&gt; fn(&amp;'r std::vec::Vec&lt;u8&gt;, &amp;'s mut std::fmt::Formatter&lt;'t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt;;<br align="left"/>let mut _96: &amp;[&amp;str; 2];<br align="left"/>let mut _97: &amp;[&amp;str; 2];<br align="left"/>let mut _98: &amp;[std::fmt::ArgumentV1; 0];<br align="left"/>let mut _99: &amp;[&amp;str; 1];<br align="left"/>debug secret_key =&gt; _1;<br align="left"/>debug buffer =&gt; _2;<br align="left"/>debug message =&gt; _16;<br align="left"/>debug iter =&gt; _19;<br align="left"/>debug __next =&gt; _20;<br align="left"/>debug val =&gt; _25;<br align="left"/>debug i =&gt; _27;<br align="left"/>debug cipher_text =&gt; _41;<br align="left"/>debug text =&gt; _49;<br align="left"/>debug arg0 =&gt; _77;<br align="left"/>debug arg0 =&gt; _92;<br align="left"/>>;
    bb0__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left">_1 = simple::get_secret_key()</td></tr></table>>];
    bb1__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left">_2 = String::new()</td></tr></table>>];
    bb2__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_99 = const main::promoted[3]<br/>_7 = _99<br/>_6 = _7<br/>_5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))<br/>_98 = const main::promoted[2]<br/>_10 = _98<br/>_9 = _10<br/>_8 = move _9 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))<br/></td></tr><tr><td align="left">_4 = Arguments::new_v1(move _5, move _8)</td></tr></table>>];
    bb3__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left">_3 = _print(move _4)</td></tr></table>>];
    bb4__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">_13 = stdin()</td></tr></table>>];
    bb5__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">_12 = &amp;_13<br/>_15 = &amp;mut _2<br/>_14 = &amp;mut (*_15)<br/></td></tr><tr><td align="left">_11 = Stdin::read_line(move _12, move _14)</td></tr></table>>];
    bb6__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left">drop(_11)</td></tr></table>>];
    bb7__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_16 = [const 0_u8; 8]<br/>(_18.0: usize) = const 0_usize<br/>(_18.1: usize) = const 8_usize<br/></td></tr><tr><td align="left">_17 = &lt;std::ops::Range&lt;usize&gt; as IntoIterator&gt;::into_iter(move _18)</td></tr></table>>];
    bb8__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">_19 = move _17<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">_23 = &amp;mut _19<br/>_22 = &amp;mut (*_23)<br/></td></tr><tr><td align="left">_21 = &lt;std::ops::Range&lt;usize&gt; as Iterator&gt;::next(move _22)</td></tr></table>>];
    bb10__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">_24 = discriminant(_21)<br/></td></tr><tr><td align="left">switchInt(move _24)</td></tr></table>>];
    bb11__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">_44 = &amp;_16<br/>_43 = _44<br/>_42 = move _43 as &amp;[u8] (Pointer(Unsize))<br/>_48 = &amp;_1<br/>_47 = _48<br/></td></tr><tr><td align="left">_46 = &lt;Vec&lt;secret_integers::U8&gt; as Deref&gt;::deref(move _47)</td></tr></table>>];
    bb12__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb13__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">_25 = ((_21 as Some).0: usize)<br/>_26 = _25<br/>_20 = move _26<br/>_27 = _20<br/>_29 = _27<br/>_31 = &amp;_2<br/></td></tr><tr><td align="left">_30 = String::len(move _31)</td></tr></table>>];
    bb14__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">_28 = Lt(move _29, move _30)<br/></td></tr><tr><td align="left">switchInt(move _28)</td></tr></table>>];
    bb15__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">_34 = &amp;_2<br/></td></tr><tr><td align="left">_33 = String::as_bytes(move _34)</td></tr></table>>];
    bb16__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left">goto</td></tr></table>>];
    bb17__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">_35 = _27<br/>_36 = Len((*_33))<br/>_37 = Lt(_35, _36)<br/></td></tr><tr><td align="left">assert(move _37, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _36, _35)</td></tr></table>>];
    bb18__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">_32 = (*_33)[_35]<br/>_38 = _27<br/>_39 = const 8_usize<br/>_40 = Lt(_38, _39)<br/></td></tr><tr><td align="left">assert(move _40, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _39, _38)</td></tr></table>>];
    bb19__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">_16[_38] = move _32<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb20__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left">goto</td></tr></table>>];
    bb21__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">_45 = _46<br/></td></tr><tr><td align="left">_41 = simple::encrypt(move _42, move _45)</td></tr></table>>];
    bb22__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">_53 = &amp;_41<br/>_52 = _53<br/></td></tr><tr><td align="left">_51 = &lt;Vec&lt;u8&gt; as Deref&gt;::deref(move _52)</td></tr></table>>];
    bb23__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">_50 = _51<br/>_57 = &amp;_1<br/>_56 = _57<br/></td></tr><tr><td align="left">_55 = &lt;Vec&lt;secret_integers::U8&gt; as Deref&gt;::deref(move _56)</td></tr></table>>];
    bb24__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">_54 = _55<br/></td></tr><tr><td align="left">_49 = simple::decrypt(move _50, move _54)</td></tr></table>>];
    bb25__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">_60 = &amp;_16<br/>_64 = &amp;_49<br/></td></tr><tr><td align="left">_63 = &lt;Vec&lt;u8&gt; as Index&lt;RangeFull&gt;&gt;::index(move _64, move _65)</td></tr></table>>];
    bb26__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">_62 = _63<br/>_61 = &amp;_62<br/></td></tr><tr><td align="left">_59 = &lt;[u8; 8] as PartialEq&lt;&amp;[u8]&gt;&gt;::eq(move _60, move _61)</td></tr></table>>];
    bb27__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">_58 = Not(move _59)<br/></td></tr><tr><td align="left">switchInt(move _58)</td></tr></table>>];
    bb28__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left">core::panicking::panic(const &quot;assertion failed: message == &amp;text[..]&quot;)</td></tr></table>>];
    bb29__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">_97 = const main::promoted[1]<br/>_70 = _97<br/>_69 = _70<br/>_68 = move _69 as &amp;[&amp;str] (Pointer(Unsize))<br/>_76 = &amp;_16<br/>(_75.0: &amp;[u8; 8]) = move _76<br/>_77 = (_75.0: &amp;[u8; 8])<br/>_79 = _77<br/>_80 = &lt;[u8; 8] as Debug&gt;::fmt as for&lt;'r, 's, 't0&gt; fn(&amp;'r [u8; 8], &amp;'s mut std::fmt::Formatter&lt;'t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))<br/></td></tr><tr><td align="left">_78 = ArgumentV1::new::&lt;[u8; 8]&gt;(move _79, move _80)</td></tr></table>>];
    bb30__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">_74 = [move _78]<br/>_73 = &amp;_74<br/>_72 = _73<br/>_71 = move _72 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))<br/></td></tr><tr><td align="left">_67 = Arguments::new_v1(move _68, move _71)</td></tr></table>>];
    bb31__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left">_66 = _print(move _67)</td></tr></table>>];
    bb32__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">_96 = const main::promoted[0]<br/>_85 = _96<br/>_84 = _85<br/>_83 = move _84 as &amp;[&amp;str] (Pointer(Unsize))<br/>_91 = &amp;_41<br/>(_90.0: &amp;std::vec::Vec&lt;u8&gt;) = move _91<br/>_92 = (_90.0: &amp;std::vec::Vec&lt;u8&gt;)<br/>_94 = _92<br/>_95 = &lt;Vec&lt;u8&gt; as Debug&gt;::fmt as for&lt;'r, 's, 't0&gt; fn(&amp;'r std::vec::Vec&lt;u8&gt;, &amp;'s mut std::fmt::Formatter&lt;'t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))<br/></td></tr><tr><td align="left">_93 = ArgumentV1::new::&lt;Vec&lt;u8&gt;&gt;(move _94, move _95)</td></tr></table>>];
    bb33__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">_89 = [move _93]<br/>_88 = &amp;_89<br/>_87 = _88<br/>_86 = move _87 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))<br/></td></tr><tr><td align="left">_82 = Arguments::new_v1(move _83, move _86)</td></tr></table>>];
    bb34__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left">_81 = _print(move _82)</td></tr></table>>];
    bb35__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left">drop(_49)</td></tr></table>>];
    bb36__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left">drop(_41)</td></tr></table>>];
    bb37__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left">drop(_2)</td></tr></table>>];
    bb38__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left">drop(_1)</td></tr></table>>];
    bb39__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left">return</td></tr></table>>];
    bb40__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">40 (cleanup)</td></tr><tr><td align="left">drop(_49)</td></tr></table>>];
    bb41__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">41 (cleanup)</td></tr><tr><td align="left">drop(_41)</td></tr></table>>];
    bb42__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">42 (cleanup)</td></tr><tr><td align="left">drop(_2)</td></tr></table>>];
    bb43__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">43 (cleanup)</td></tr><tr><td align="left">drop(_1)</td></tr></table>>];
    bb44__0_22 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">44 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_22 -> bb1__0_22 [label="return"];
    bb1__0_22 -> bb2__0_22 [label="return"];
    bb1__0_22 -> bb43__0_22 [label="unwind"];
    bb2__0_22 -> bb3__0_22 [label="return"];
    bb2__0_22 -> bb42__0_22 [label="unwind"];
    bb3__0_22 -> bb4__0_22 [label="return"];
    bb3__0_22 -> bb42__0_22 [label="unwind"];
    bb4__0_22 -> bb5__0_22 [label="return"];
    bb4__0_22 -> bb42__0_22 [label="unwind"];
    bb5__0_22 -> bb6__0_22 [label="return"];
    bb5__0_22 -> bb42__0_22 [label="unwind"];
    bb6__0_22 -> bb7__0_22 [label="return"];
    bb6__0_22 -> bb42__0_22 [label="unwind"];
    bb7__0_22 -> bb8__0_22 [label="return"];
    bb7__0_22 -> bb42__0_22 [label="unwind"];
    bb8__0_22 -> bb9__0_22 [label=""];
    bb9__0_22 -> bb10__0_22 [label="return"];
    bb9__0_22 -> bb42__0_22 [label="unwind"];
    bb10__0_22 -> bb11__0_22 [label="0_isize"];
    bb10__0_22 -> bb13__0_22 [label="1_isize"];
    bb10__0_22 -> bb12__0_22 [label="otherwise"];
    bb11__0_22 -> bb21__0_22 [label="return"];
    bb11__0_22 -> bb42__0_22 [label="unwind"];
    bb13__0_22 -> bb14__0_22 [label="return"];
    bb13__0_22 -> bb42__0_22 [label="unwind"];
    bb14__0_22 -> bb16__0_22 [label="false"];
    bb14__0_22 -> bb15__0_22 [label="otherwise"];
    bb15__0_22 -> bb17__0_22 [label="return"];
    bb15__0_22 -> bb42__0_22 [label="unwind"];
    bb16__0_22 -> bb20__0_22 [label=""];
    bb17__0_22 -> bb18__0_22 [label="success"];
    bb17__0_22 -> bb42__0_22 [label="unwind"];
    bb18__0_22 -> bb19__0_22 [label="success"];
    bb18__0_22 -> bb42__0_22 [label="unwind"];
    bb19__0_22 -> bb20__0_22 [label=""];
    bb20__0_22 -> bb9__0_22 [label=""];
    bb21__0_22 -> bb22__0_22 [label="return"];
    bb21__0_22 -> bb42__0_22 [label="unwind"];
    bb22__0_22 -> bb23__0_22 [label="return"];
    bb22__0_22 -> bb41__0_22 [label="unwind"];
    bb23__0_22 -> bb24__0_22 [label="return"];
    bb23__0_22 -> bb41__0_22 [label="unwind"];
    bb24__0_22 -> bb25__0_22 [label="return"];
    bb24__0_22 -> bb41__0_22 [label="unwind"];
    bb25__0_22 -> bb26__0_22 [label="return"];
    bb25__0_22 -> bb40__0_22 [label="unwind"];
    bb26__0_22 -> bb27__0_22 [label="return"];
    bb26__0_22 -> bb40__0_22 [label="unwind"];
    bb27__0_22 -> bb29__0_22 [label="false"];
    bb27__0_22 -> bb28__0_22 [label="otherwise"];
    bb28__0_22 -> bb40__0_22 [label="unwind"];
    bb29__0_22 -> bb30__0_22 [label="return"];
    bb29__0_22 -> bb40__0_22 [label="unwind"];
    bb30__0_22 -> bb31__0_22 [label="return"];
    bb30__0_22 -> bb40__0_22 [label="unwind"];
    bb31__0_22 -> bb32__0_22 [label="return"];
    bb31__0_22 -> bb40__0_22 [label="unwind"];
    bb32__0_22 -> bb33__0_22 [label="return"];
    bb32__0_22 -> bb40__0_22 [label="unwind"];
    bb33__0_22 -> bb34__0_22 [label="return"];
    bb33__0_22 -> bb40__0_22 [label="unwind"];
    bb34__0_22 -> bb35__0_22 [label="return"];
    bb34__0_22 -> bb40__0_22 [label="unwind"];
    bb35__0_22 -> bb36__0_22 [label="return"];
    bb35__0_22 -> bb41__0_22 [label="unwind"];
    bb36__0_22 -> bb37__0_22 [label="return"];
    bb36__0_22 -> bb42__0_22 [label="unwind"];
    bb37__0_22 -> bb38__0_22 [label="return"];
    bb37__0_22 -> bb43__0_22 [label="unwind"];
    bb38__0_22 -> bb39__0_22 [label="return"];
    bb40__0_22 -> bb41__0_22 [label="return"];
    bb41__0_22 -> bb42__0_22 [label="return"];
    bb42__0_22 -> bb43__0_22 [label="return"];
    bb43__0_22 -> bb44__0_22 [label="return"];
}
subgraph cluster_Mir_0_19 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn simple::encrypt::{constant#0}() -&gt; usize<br align="left"/>>;
    bb0__0_19 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_0 = const 8_usize<br/></td></tr><tr><td align="left">return</td></tr></table>>];
}
}
